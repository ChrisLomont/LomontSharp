// Fonts, ported from Chris Lomont's ancient C/C++ code

using System.Collections.Generic;
using System.Linq;

namespace Lomont.Graphics.Fonts
{
    /// <summary>
    /// Holds simple bitmap fonts
    /// </summary>
    public class BitmapFont
    {

        /// <summary>
        /// basic font is two color, monospaced 5x7 pixel font
        /// </summary>
        public BitmapFont(string name = "")
        {
            if (string.IsNullOrEmpty(name))
                SelectFont(5, 7, 2, true);
            else
            {
                var fd = GetFontDescriptions().FirstOrDefault(f => f.Name == name);
                if (fd == null)
                    SelectFont(5, 7, 2, true);
                else
                    SelectFont(InstalledFonts.First(f => f.Name == name));
            }
        }

        public override string ToString()
        {
            return font.Name;
        }

        /// <summary>
        /// font description
        /// </summary>
        public class FontDesc
        {
            public int Width, Height; // basic size
            public int Ascender, Descender; // extra for special characters
            public int Colors; // number of colors used
            public bool Monospaced; // is it monospaced?
            public string Name; // the names
        };

        /// <summary>
        /// get all the bitmap fonts known
        /// </summary>
        /// <returns></returns>
        public static List<FontDesc> GetFontDescriptions()
        {
            var descriptions = new List<FontDesc>();
            foreach (var fd in InstalledFonts)
            {
                var desc = new FontDesc
                {
                    Width = fd.Width,
                    Height = fd.Height,
                    Ascender = fd.Ascender,
                    Descender = fd.Descender,
                    Colors = fd.Colors,
                    Monospaced =  fd.Spacing==null,
                    Name = fd.Name
                };
                descriptions.Add(desc);
            }

            return descriptions;
        }

        /// <summary>
        /// make a font by name. If cannot find, default font
        /// </summary>
        /// <param name="name"></param>
        public static BitmapFont MakeFont(string name)
        {
            foreach (var fd in InstalledFonts)
            {
                if (fd.Name == name)
                {
                    return new BitmapFont(name);
                }
            }

            return new BitmapFont();
        } // SelectFont


        // select font by internal index - do not use in external code
        void SelectFont(FontDescExt fontIn)
        {
            if (null == fontIn.Palette)
            { // construct greyscale palette
                palette = new List<byte>(fontIn.Colors * 3); // RGB
                for (var c = 0; c < fontIn.Colors; ++c)
                {
                    var color = (byte)(c * 255 / (fontIn.Colors - 1));
                    palette.Add(color);
                    palette.Add(color);
                    palette.Add(color);
                }
            }
            else
            {
                palette = new List<byte>(fontIn.Colors * 3); // RGB
                palette.AddRange(fontIn.Palette);
            }

            this.font = fontIn;
        }

        // select font by internal index - do not use in external code
        void SelectFont(int index) => SelectFont(InstalledFonts[index]);

        /// <summary>
        /// select a font by size (finds best fit)
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="colors"></param>
        /// <param name="monospaced"></param>
        public void SelectFont(int width, int height, int colors, bool monospaced)
        {
            int pos = 0, best = -1;
            var minErr = 10000;
            foreach (var fd in InstalledFonts)
            {
                var dx = width - fd.Width;
                var dy = height - fd.Height;
                var err = dx * dx + dy * dy;
                if (-1 == best || err < minErr)
                { // todo - check other options
                    best = pos;
                    minErr = err;
                }
                ++pos;
            }
            if (-1 != best)
                SelectFont(best);
        } // SelectFont


        // get the number of colors in palette
        public int NumColors() => palette.Count / 3;

        // set the palette colors
        public void SetPalette(List<byte> paletteIn)
        {
            this.palette.Clear();
            this.palette.AddRange(paletteIn);
        } 

        // get the palette colors
        public void GetPalette(List<byte> paletteIn)
        {
            paletteIn.Clear();
            paletteIn.AddRange(this.palette);
        }

        public delegate void SetPixelDelegate(int i, int j, int red, int green, int blue);

        /// <summary>
        /// draw given text to the bitmap at the given position
        /// the string \1 then \c sets the foreground color, and
        /// \2\c sets background color from the current palette
        /// supports \n to move to next line
        /// </summary>
        /// <param name="x1"></param>
        /// <param name="y1"></param>
        /// <param name="text"></param>
        /// <param name="setPixel"></param>
        public void Draw(int x1, int y1, string text, SetPixelDelegate setPixel)
        { // todo - for speed, write entire first row, then second, etc of pixels for text?
            var maxStr = text.Length;

			int xpos = x1, ypos = y1;

            var monospaced = font.Spacing == null;

            var fhd = font.Height + font.Ascender + font.Descender;

            for (var chpos = 0; chpos<maxStr; ++chpos)
			{

				var ch = text[chpos];
				if (ch< 32 || 127 < ch)
				{
					if (1 == ch)
					{ // set fore if chars nonzero
						if (maxStr<chpos + 3) return; // not enough chars
						continue;
					}
					else if (2 == ch)
					{
						if (maxStr<chpos + 3) return; // not enough chars
						continue;
					}

                    else if ('\n' == ch)
                    {
                        ypos += fhd;
                        xpos = x1;
                        continue;
                    }
                    else
                        ch = ' '; // convert to a space
				} // out of bounds characters

				var packed = true;
                var data = font.Data;
                int dataIndex;
                byte mask = 128;
                var tempWidth = font.Width;

                if (packed)
                    dataIndex = (fhd * font.Width + 7) / 8 * (ch - 32);
                else
                    dataIndex = (ch - 32) * font.Width * fhd; // bits into the item;
                if (!monospaced)
                {
                    dataIndex = font.Offsets[ch - 32];

                    tempWidth = font.Spacing[(ch - 32) / 2];
                    if ((ch & 1) != 0)
                        tempWidth >>= 4;
                    else
                        tempWidth &= 15;
                }

                for (var y = 0; y < fhd; ++y)
                {
                    for (var x = 0; x < tempWidth; ++x)
                    {
                        int colorIndex;
                        if (packed)
                        {
                            colorIndex = 0 != (data[dataIndex] & mask) ? 1 : 0;
                            mask >>= 1;
                            if (0 == mask)
                            { // next data
                                dataIndex++;
                                mask = 128;
                            }
                        }
                        else
                            colorIndex = 0 != data[dataIndex++] ?1:0;

                        colorIndex *= 3;

                        setPixel(xpos+x,ypos+y, palette[colorIndex], palette[colorIndex+1], palette[colorIndex+2]);

                    }
                    
                    // character spacing
                    setPixel(xpos+tempWidth, ypos+y, palette[0], palette[1], palette[2]);
                }

                xpos += tempWidth + 1;
			}
		} // 


        FontDescExt font;

        List<byte> palette = new(); // rgb palette


        #region Font Data

        // Font data
        static readonly byte[] Font3X3MonoData = {
            0, 0, 72, 32, 160, 0, 216, 0, 8, 0, 8, 0, 8, 0, 64, 0, 40, 128, 138, 0, 170, 128, 93, 0, 1, 32, 28, 0, 1, 0,
            42, 0, 85, 0, 203, 128, 201, 128, 239, 128, 188, 128, 107, 0, 159, 128, 229, 0, 127, 0, 252, 128, 65, 0, 65,
            64, 113, 128, 227, 128, 199, 0, 200, 32, 246, 112, 87, 128, 223, 128, 243, 128, 215, 0, 251, 128, 250, 0,
            151, 128, 190, 128, 235, 128, 235, 0, 186, 128, 147, 128, 254, 128, 246, 128, 247, 128, 254, 0, 85, 128,
            218, 128, 107, 0, 233, 0, 183, 128, 181, 0, 191, 128, 170, 128, 169, 0, 201, 128, 105, 128, 136, 128, 101,
            128, 84, 0, 3, 128, 64, 0, 87, 128, 223, 128, 243, 128, 215, 0, 251, 128, 250, 0, 151, 128, 190, 128, 235,
            128, 235, 0, 186, 128, 147, 128, 254, 128, 246, 128, 247, 128, 254, 0, 85, 128, 218, 128, 107, 0, 233, 0,
            183, 128, 181, 0, 191, 128, 170, 128, 169, 0, 201, 128, 121, 128, 73, 0, 207, 0, 116, 0, 255, 128
        };

        static readonly byte[] Font3X4MonoData = {
            0, 0, 72, 32, 180, 0, 85, 0, 121, 224, 175, 80, 121, 80, 108, 128, 82, 32, 137, 64, 10, 160, 11, 160, 1,
            178, 3, 128, 1, 176, 47, 64, 86, 160, 201, 112, 231, 112, 236, 240, 151, 144, 241, 240, 122, 160, 229, 64,
            94, 160, 85, 224, 8, 32, 8, 40, 42, 34, 28, 112, 136, 168, 69, 32, 246, 206, 87, 208, 222, 240, 114, 48,
            214, 224, 250, 112, 243, 64, 242, 240, 183, 208, 233, 112, 230, 160, 186, 208, 146, 112, 190, 208, 191, 208,
            246, 240, 247, 192, 87, 176, 247, 80, 249, 240, 233, 32, 182, 240, 182, 160, 183, 240, 169, 80, 169, 32,
            239, 112, 210, 96, 153, 144, 201, 96, 84, 0, 0, 112, 76, 0, 10, 176, 154, 224, 14, 48, 46, 176, 31, 48, 115,
            64, 10, 188, 154, 208, 65, 32, 32, 212, 151, 80, 73, 32, 31, 208, 26, 208, 30, 240, 26, 232, 14, 178, 26,
            192, 13, 96, 93, 32, 22, 240, 22, 160, 23, 240, 21, 80, 22, 168, 25, 48, 107, 48, 73, 32, 201, 224, 116, 0,
            255, 240
        };

        static readonly byte[] Font3X5MonoData = {
            0, 0, 73, 4, 180, 0, 190, 250, 123, 188, 165, 74, 95, 94, 72, 0, 41, 34, 68, 148, 21, 80, 11, 160, 0, 104,
            3, 128, 0, 8, 37, 72, 86, 212, 201, 46, 197, 78, 229, 30, 183, 146, 243, 28, 115, 222, 229, 36, 245, 94,
            247, 156, 8, 32, 8, 40, 42, 34, 28, 112, 136, 168, 197, 4, 87, 198, 87, 218, 247, 94, 242, 78, 214, 220,
            243, 78, 243, 72, 114, 222, 183, 218, 233, 46, 36, 222, 183, 90, 146, 78, 191, 218, 214, 218, 246, 222, 247,
            200, 246, 254, 215, 90, 243, 158, 233, 36, 182, 222, 182, 212, 183, 250, 181, 90, 183, 164, 229, 78, 105,
            38, 145, 18, 100, 150, 84, 0, 0, 14, 136, 0, 1, 222, 19, 92, 1, 198, 5, 214, 10, 230, 5, 52, 10, 188, 19,
            90, 8, 36, 65, 40, 18, 234, 9, 34, 3, 250, 3, 90, 3, 222, 26, 232, 14, 178, 1, 164, 1, 172, 11, 166, 2, 214,
            2, 212, 2, 254, 2, 170, 2, 188, 3, 38, 107, 38, 73, 36, 201, 172, 7, 192, 255, 254
        };

        static readonly byte[] Font3X5MonoData2 = {
            0, 0, 0, 73, 4, 0, 180, 0, 0, 190, 250, 0, 79, 60, 128, 165, 74, 0, 85, 222, 0, 208, 0, 0, 82, 68, 0, 137,
            40, 0, 171, 170, 0, 11, 160, 0, 0, 13, 0, 3, 128, 0, 0, 4, 0, 37, 72, 0, 118, 220, 0, 89, 46, 0, 197, 78, 0,
            229, 30, 0, 183, 146, 0, 243, 28, 0, 243, 222, 0, 229, 164, 0, 245, 94, 0, 247, 158, 0, 1, 4, 0, 1, 13, 0,
            42, 34, 0, 3, 142, 0, 136, 168, 0, 197, 4, 0, 246, 206, 0, 87, 218, 0, 215, 92, 0, 114, 70, 0, 214, 220, 0,
            243, 78, 0, 243, 72, 0, 114, 214, 0, 183, 218, 0, 233, 46, 0, 36, 212, 0, 183, 90, 0, 146, 78, 0, 191, 218,
            0, 190, 218, 0, 86, 212, 0, 215, 72, 0, 86, 246, 0, 215, 90, 0, 115, 156, 0, 233, 36, 0, 182, 222, 0, 182,
            212, 0, 183, 250, 0, 181, 90, 0, 181, 36, 0, 229, 78, 0, 210, 76, 0, 145, 18, 0, 201, 44, 0, 84, 0, 0, 0, 1,
            192, 200, 0, 0, 1, 222, 0, 147, 92, 0, 1, 198, 0, 37, 214, 0, 10, 230, 0, 43, 164, 0, 3, 211, 192, 147, 90,
            0, 65, 36, 0, 65, 37, 128, 146, 234, 0, 73, 36, 0, 3, 250, 0, 3, 90, 0, 1, 84, 0, 3, 93, 0, 1, 214, 64, 3,
            72, 0, 1, 172, 0, 11, 166, 0, 2, 214, 0, 2, 212, 0, 2, 254, 0, 2, 170, 0, 2, 213, 0, 3, 38, 0, 107, 38, 0,
            73, 36, 0, 201, 172, 0, 168, 0, 0, 255, 254, 0
        };

        static readonly byte[] Font4X4MonoData = {
            0, 0, 34, 2, 85, 0, 250, 250, 99, 198, 218, 91, 109, 165, 34, 0, 36, 66, 66, 36, 111, 105, 2, 114, 0, 18, 0,
            96, 0, 4, 18, 72, 74, 164, 76, 78, 98, 70, 103, 22, 106, 242, 236, 44, 236, 164, 226, 68, 111, 150, 234,
            226, 64, 64, 32, 36, 60, 195, 240, 240, 195, 60, 97, 2, 125, 167, 74, 234, 239, 158, 52, 67, 202, 172, 236,
            142, 232, 200, 104, 182, 170, 234, 228, 78, 228, 72, 172, 202, 136, 142, 255, 153, 157, 185, 105, 150, 234,
            232, 105, 183, 234, 202, 54, 22, 228, 68, 170, 166, 170, 68, 153, 255, 150, 105, 174, 68, 242, 79, 100, 70,
            132, 33, 98, 38, 74, 0, 0, 15, 132, 0, 121, 181, 142, 158, 3, 67, 23, 151, 111, 135, 72, 200, 106, 108, 142,
            170, 64, 68, 34, 38, 138, 202, 68, 68, 250, 170, 173, 153, 74, 164, 202, 200, 202, 198, 172, 136, 50, 19,
            70, 66, 153, 181, 170, 228, 170, 167, 164, 74, 164, 68, 98, 70, 54, 99, 102, 102, 99, 54, 165, 0, 255, 255
        };

        static readonly byte[] Font4X4MonoData2 = {
            0, 0, 0, 34, 2, 0, 85, 0, 0, 95, 95, 80, 54, 54, 0, 146, 73, 0, 35, 99, 0, 34, 0, 0, 36, 66, 0, 66, 36, 0,
            150, 105, 0, 4, 228, 0, 0, 2, 64, 0, 240, 0, 0, 102, 0, 18, 72, 0, 249, 159, 0, 98, 39, 0, 242, 207, 0, 247,
            31, 0, 153, 241, 0, 248, 247, 0, 143, 159, 0, 241, 17, 0, 235, 215, 0, 249, 241, 0, 2, 2, 0, 2, 2, 32, 3,
            195, 0, 14, 14, 0, 12, 60, 0, 243, 32, 32, 251, 143, 0, 249, 249, 0, 202, 218, 0, 248, 143, 0, 233, 158, 0,
            254, 143, 0, 248, 232, 0, 248, 159, 0, 153, 249, 0, 244, 79, 0, 241, 159, 0, 188, 169, 0, 136, 143, 0, 251,
            153, 0, 219, 153, 0, 249, 159, 0, 249, 248, 0, 249, 191, 0, 249, 250, 0, 120, 247, 0, 244, 68, 0, 153, 159,
            0, 153, 150, 0, 153, 191, 0, 150, 105, 0, 153, 244, 0, 242, 79, 0, 100, 70, 0, 132, 33, 0, 98, 38, 0, 74, 0,
            0, 0, 0, 240, 34, 0, 0, 7, 159, 0, 143, 159, 0, 14, 142, 0, 31, 159, 0, 15, 167, 0, 52, 244, 0, 15, 159, 32,
            143, 153, 0, 32, 34, 0, 32, 34, 32, 138, 202, 0, 34, 34, 0, 7, 187, 0, 15, 153, 0, 15, 159, 0, 15, 159, 128,
            15, 159, 16, 14, 136, 0, 3, 46, 0, 78, 70, 0, 10, 174, 0, 9, 150, 0, 11, 183, 0, 10, 74, 0, 9, 159, 16, 12,
            71, 0, 36, 196, 32, 68, 68, 64, 66, 50, 64, 5, 160, 0, 255, 255, 0
        };

        static readonly byte[] Font5X5MonoData = {
            0, 0, 0, 0, 33, 8, 2, 0, 82, 128, 0, 0, 87, 213, 245, 0, 125, 28, 95, 0, 206, 136, 185, 128, 69, 17, 69, 0,
            17, 0, 0, 0, 34, 16, 130, 0, 32, 132, 34, 0, 147, 60, 201, 0, 1, 28, 64, 0, 0, 0, 68, 0, 0, 28, 0, 0, 0, 0,
            99, 0, 17, 156, 196, 0, 101, 181, 38, 0, 35, 8, 71, 0, 100, 136, 143, 0, 100, 137, 38, 0, 165, 60, 66, 0,
            244, 56, 46, 0, 100, 57, 38, 0, 240, 136, 132, 0, 100, 153, 38, 0, 100, 156, 46, 0, 1, 0, 64, 0, 1, 0, 68,
            0, 17, 16, 65, 0, 7, 129, 224, 0, 65, 4, 68, 0, 100, 140, 2, 0, 117, 173, 7, 0, 100, 189, 41, 0, 228, 185,
            46, 0, 100, 161, 38, 0, 228, 165, 46, 0, 244, 57, 15, 0, 244, 57, 8, 0, 116, 45, 38, 0, 148, 189, 41, 0,
            113, 8, 71, 0, 16, 133, 38, 0, 149, 49, 73, 0, 132, 33, 15, 0, 142, 235, 24, 128, 150, 173, 41, 0, 100, 165,
            38, 0, 228, 185, 8, 0, 100, 173, 38, 128, 228, 185, 73, 0, 116, 24, 46, 0, 249, 8, 66, 0, 148, 165, 38, 0,
            140, 98, 162, 0, 140, 107, 184, 128, 148, 153, 41, 0, 138, 136, 66, 0, 241, 17, 15, 0, 98, 16, 134, 0, 66,
            8, 33, 0, 97, 8, 70, 0, 34, 128, 0, 0, 0, 0, 15, 0, 65, 0, 0, 0, 96, 157, 39, 0, 132, 57, 46, 0, 3, 33, 6,
            0, 16, 157, 39, 0, 100, 189, 7, 0, 17, 28, 66, 0, 116, 156, 46, 0, 133, 53, 41, 0, 32, 8, 66, 0, 16, 132,
            162, 0, 66, 152, 197, 0, 33, 8, 66, 0, 2, 171, 88, 128, 3, 37, 41, 0, 3, 37, 38, 0, 228, 185, 8, 0, 116,
            156, 33, 0, 5, 177, 8, 0, 50, 8, 38, 0, 35, 136, 67, 0, 4, 165, 38, 0, 4, 98, 162, 0, 4, 107, 85, 0, 4, 152,
            201, 0, 148, 156, 46, 0, 7, 136, 143, 0, 98, 48, 134, 0, 33, 8, 66, 0, 97, 12, 70, 0, 1, 116, 0, 0, 255,
            255, 255, 128
        };

        static readonly byte[] Font5X7MonoData = {
            0, 0, 0, 0, 0, 0, 0, 1, 8, 66, 16, 4, 0, 0, 2, 148, 160, 0, 0, 0, 0, 0, 21, 245, 43, 234, 0, 0, 1, 31, 71,
            23, 196, 0, 0, 0, 51, 162, 46, 96, 0, 0, 2, 41, 68, 86, 77, 0, 0, 0, 132, 64, 0, 0, 0, 0, 17, 16, 132, 33,
            4, 16, 0, 65, 4, 33, 8, 68, 64, 0, 0, 9, 87, 84, 128, 0, 0, 0, 8, 79, 144, 128, 0, 0, 0, 0, 0, 0, 4, 64, 0,
            0, 0, 15, 128, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 68, 34, 17, 8, 128, 0, 3, 163, 58, 230, 46, 0, 0, 1, 24, 66,
            16, 142, 0, 0, 3, 162, 19, 34, 31, 0, 0, 3, 162, 19, 6, 46, 0, 0, 0, 140, 169, 124, 66, 0, 0, 7, 225, 15, 6,
            46, 0, 0, 1, 145, 15, 70, 46, 0, 0, 7, 194, 33, 16, 136, 0, 0, 3, 163, 23, 70, 46, 0, 0, 3, 163, 23, 132,
            76, 0, 0, 0, 0, 64, 0, 128, 0, 0, 0, 0, 64, 0, 136, 0, 0, 0, 2, 108, 24, 32, 0, 0, 0, 1, 240, 124, 0, 0, 0,
            0, 32, 193, 178, 0, 0, 0, 3, 162, 17, 16, 4, 0, 0, 3, 163, 90, 222, 15, 0, 0, 1, 8, 165, 58, 49, 0, 0, 7,
            163, 31, 70, 62, 0, 0, 3, 163, 8, 66, 46, 0, 0, 7, 37, 24, 198, 92, 0, 0, 7, 225, 15, 66, 31, 0, 0, 7, 225,
            15, 66, 16, 0, 0, 3, 163, 9, 198, 47, 0, 0, 4, 99, 31, 198, 49, 0, 0, 3, 136, 66, 16, 142, 0, 0, 1, 194, 16,
            132, 62, 0, 0, 4, 101, 76, 82, 81, 0, 0, 4, 33, 8, 66, 31, 0, 0, 4, 99, 189, 214, 177, 0, 0, 6, 115, 90,
            214, 115, 0, 0, 3, 163, 24, 198, 46, 0, 0, 7, 163, 31, 66, 16, 0, 0, 3, 163, 24, 198, 111, 0, 0, 7, 163, 31,
            70, 49, 0, 0, 3, 163, 7, 6, 46, 0, 0, 7, 200, 66, 16, 132, 0, 0, 4, 99, 24, 198, 46, 0, 0, 4, 99, 21, 40,
            132, 0, 0, 4, 107, 90, 169, 74, 0, 0, 4, 98, 162, 42, 49, 0, 0, 4, 99, 23, 16, 132, 0, 0, 7, 194, 34, 34,
            31, 0, 0, 114, 16, 132, 33, 8, 112, 0, 132, 16, 130, 16, 66, 8, 0, 112, 132, 33, 8, 66, 112, 0, 1, 21, 16,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 16, 130, 0, 0, 0, 0, 0, 0, 224, 190, 47, 0, 0, 132, 33, 232, 198, 62,
            0, 0, 0, 0, 248, 66, 15, 0, 0, 8, 66, 248, 198, 47, 0, 0, 0, 0, 232, 254, 15, 0, 0, 58, 17, 228, 33, 8, 0,
            0, 0, 0, 232, 198, 47, 11, 128, 132, 33, 232, 198, 49, 0, 0, 1, 0, 194, 16, 132, 0, 0, 0, 128, 97, 8, 66,
            23, 0, 66, 16, 149, 49, 73, 0, 0, 97, 8, 66, 16, 132, 0, 0, 0, 1, 170, 214, 181, 0, 0, 0, 1, 232, 198, 49,
            0, 0, 0, 0, 232, 198, 46, 0, 0, 0, 1, 232, 198, 62, 132, 0, 0, 0, 248, 198, 47, 8, 64, 0, 1, 108, 194, 16,
            0, 0, 0, 0, 248, 56, 62, 0, 0, 2, 16, 228, 33, 7, 0, 0, 0, 1, 24, 198, 47, 0, 0, 0, 1, 24, 169, 68, 0, 0, 0,
            1, 26, 213, 74, 0, 0, 0, 1, 21, 17, 81, 0, 0, 0, 1, 24, 198, 47, 11, 128, 0, 1, 241, 17, 31, 0, 0, 17, 8,
            68, 16, 132, 16, 0, 33, 8, 66, 16, 132, 32, 0, 65, 8, 65, 16, 132, 64, 0, 0, 0, 170, 0, 0, 0, 0, 7, 255,
            255, 255, 255, 248, 0
        };

        static readonly byte[] Font5X8NMonoData = {
            0, 0, 0, 0, 0, 132, 33, 8, 64, 16, 82, 148, 0, 0, 0, 2, 190, 175, 168, 0, 35, 160, 193, 112, 128, 198, 4,
            68, 64, 198, 69, 40, 133, 82, 138, 66, 16, 0, 0, 0, 34, 33, 8, 65, 4, 130, 8, 66, 17, 16, 37, 93, 247, 84,
            128, 1, 9, 242, 16, 0, 0, 0, 0, 24, 194, 0, 1, 224, 0, 0, 0, 0, 0, 24, 192, 8, 132, 66, 33, 16, 100, 165,
            109, 74, 76, 70, 16, 132, 33, 28, 100, 164, 34, 34, 30, 100, 132, 65, 74, 76, 17, 149, 47, 8, 66, 244, 33,
            193, 10, 76, 100, 161, 201, 74, 76, 240, 132, 68, 33, 8, 100, 164, 201, 74, 76, 100, 164, 225, 10, 76, 6,
            48, 12, 96, 0, 6, 48, 12, 97, 0, 0, 217, 6, 12, 0, 0, 60, 15, 0, 0, 6, 12, 19, 96, 0, 118, 226, 51, 16, 4,
            100, 165, 107, 66, 76, 100, 165, 233, 74, 82, 228, 165, 201, 74, 92, 100, 165, 8, 74, 76, 228, 165, 41, 74,
            92, 244, 33, 200, 66, 30, 244, 33, 200, 66, 16, 100, 161, 105, 74, 76, 148, 165, 233, 74, 82, 226, 16, 132,
            33, 28, 16, 132, 33, 10, 76, 148, 169, 140, 82, 82, 132, 33, 8, 66, 30, 142, 235, 24, 198, 49, 148, 181,
            171, 90, 82, 100, 165, 41, 74, 76, 228, 165, 200, 66, 16, 100, 165, 41, 90, 77, 228, 165, 204, 82, 82, 100,
            160, 193, 10, 76, 249, 8, 66, 16, 132, 148, 165, 41, 74, 76, 140, 99, 24, 197, 68, 140, 99, 26, 215, 113,
            148, 164, 198, 74, 82, 140, 98, 162, 16, 132, 240, 136, 68, 34, 30, 228, 33, 8, 66, 28, 130, 16, 66, 8, 65,
            56, 66, 16, 132, 39, 1, 20, 0, 0, 0, 0, 0, 0, 0, 31, 130, 0, 0, 0, 0, 0, 24, 39, 73, 192, 132, 57, 41, 75,
            128, 0, 29, 8, 65, 192, 16, 157, 41, 73, 192, 0, 25, 47, 65, 192, 34, 56, 132, 33, 0, 0, 29, 41, 56, 92,
            132, 57, 41, 74, 64, 128, 33, 8, 66, 0, 32, 8, 66, 18, 136, 132, 37, 76, 82, 64, 132, 33, 8, 66, 0, 0, 21,
            90, 214, 160, 0, 25, 41, 74, 64, 0, 25, 41, 73, 128, 0, 57, 41, 114, 16, 0, 29, 41, 56, 66, 0, 45, 136, 66,
            0, 0, 29, 6, 11, 128, 66, 56, 132, 33, 128, 0, 37, 41, 73, 128, 0, 37, 41, 49, 128, 0, 35, 26, 213, 64, 0,
            37, 38, 74, 64, 0, 37, 41, 56, 92, 0, 60, 68, 67, 192, 50, 17, 8, 33, 6, 33, 8, 66, 16, 132, 96, 132, 16,
            136, 76, 0, 0, 219, 0, 0, 255, 255, 255, 255, 255,
        };

        static readonly byte[] Font5X8NData = {
            0, 0, 0, 0, 0, 253, 182, 128, 0, 2, 190, 175, 168, 0, 39, 134, 30, 32, 204, 18, 72, 51, 74, 164, 90, 165,
            224, 42, 73, 17, 136, 146, 84, 37, 93, 247, 84, 128, 1, 9, 242, 16, 0, 0, 61, 0, 15, 0, 0, 0, 60, 8, 132,
            66, 33, 16, 105, 155, 217, 150, 89, 36, 151, 105, 145, 36, 143, 105, 18, 25, 150, 19, 89, 241, 17, 248, 142,
            17, 150, 105, 142, 153, 150, 241, 18, 68, 68, 105, 150, 153, 150, 105, 151, 17, 150, 60, 240, 60, 244, 0,
            217, 6, 12, 0, 0, 240, 240, 0, 6, 12, 19, 96, 0, 118, 226, 51, 16, 4, 105, 155, 184, 150, 105, 159, 153,
            153, 233, 158, 153, 158, 105, 152, 137, 150, 233, 153, 153, 158, 248, 142, 136, 143, 248, 142, 136, 136,
            105, 139, 153, 150, 153, 159, 153, 153, 233, 36, 151, 17, 17, 17, 150, 153, 172, 202, 153, 136, 136, 136,
            143, 142, 235, 24, 198, 49, 153, 221, 187, 153, 105, 153, 153, 150, 233, 158, 136, 136, 100, 165, 41, 90,
            77, 233, 158, 202, 153, 105, 134, 17, 150, 249, 8, 66, 16, 132, 153, 153, 153, 150, 140, 99, 24, 197, 68,
            140, 99, 26, 215, 113, 153, 150, 105, 153, 140, 98, 162, 16, 132, 241, 34, 68, 143, 242, 73, 39, 130, 16,
            66, 8, 65, 228, 146, 79, 10, 128, 0, 0, 0, 0, 0, 31, 144, 0, 0, 97, 121, 112, 136, 233, 153, 224, 0, 120,
            136, 112, 17, 121, 153, 112, 0, 105, 248, 112, 43, 164, 144, 0, 121, 151, 30, 136, 233, 153, 144, 190, 32,
            146, 106, 136, 154, 202, 144, 254, 0, 21, 90, 214, 160, 0, 105, 153, 144, 0, 105, 153, 96, 0, 233, 158, 136,
            0, 121, 151, 17, 0, 188, 136, 128, 0, 120, 97, 224, 75, 164, 152, 0, 153, 153, 96, 0, 153, 150, 96, 0, 35,
            26, 213, 64, 0, 153, 105, 144, 0, 153, 151, 30, 0, 242, 72, 240, 52, 72, 132, 67, 255, 194, 33, 18, 44, 0,
            0, 219, 0, 0, 255, 255, 255, 255, 255,
        };

        static readonly byte[] Font5X8NWidths = {
            21, 83, 68, 20, 51, 85, 66, 82, 52, 68, 68, 68, 68, 34, 69, 85, 68, 68, 68, 68, 52, 68, 84, 68, 84, 68, 69,
            85, 84, 52, 53, 83, 66, 68, 68, 67, 20, 67, 81, 68, 68, 68, 67, 84, 68, 68, 65, 85,
        };

        static readonly short [] Font5X8NOffsets = {
            0, 5, 6, 9, 14, 18, 22, 26, 27, 30, 33, 38, 43, 45, 49, 51, 56, 60, 63, 67, 71, 75, 79, 83, 87, 91, 95, 97,
            99, 104, 108, 113, 118, 122, 126, 130, 134, 138, 142, 146, 150, 154, 157, 161, 165, 169, 174, 178, 182, 186,
            191, 195, 199, 204, 208, 213, 218, 222, 227, 231, 234, 239, 242, 245, 250, 252, 256, 260, 264, 268, 272,
            275, 279, 283, 284, 287, 291, 292, 297, 301, 305, 309, 313, 317, 321, 324, 328, 332, 337, 341, 345, 349,
            353, 354, 358, 363,
        };

        static readonly byte[] Font5X8MonoData = {
            0, 0, 0, 0, 0, 132, 33, 8, 64, 16, 82, 128, 0, 0, 0, 0, 21, 245, 125, 64, 35, 224, 195, 7, 196, 6, 50, 34,
            34, 99, 100, 164, 198, 202, 77, 66, 0, 0, 0, 0, 34, 33, 8, 65, 4, 130, 8, 66, 17, 16, 37, 93, 247, 84, 128,
            1, 9, 242, 16, 0, 0, 0, 0, 24, 194, 0, 1, 240, 0, 0, 0, 0, 0, 24, 192, 8, 132, 66, 33, 16, 116, 103, 90,
            230, 46, 17, 132, 33, 8, 71, 116, 66, 17, 17, 31, 116, 66, 96, 134, 46, 17, 149, 47, 136, 66, 252, 33, 224,
            134, 46, 116, 97, 232, 198, 46, 248, 66, 34, 16, 132, 116, 98, 232, 198, 46, 116, 98, 240, 134, 46, 6, 48,
            12, 96, 0, 6, 48, 12, 97, 0, 0, 217, 6, 12, 0, 0, 60, 15, 0, 0, 6, 12, 19, 96, 0, 34, 162, 34, 16, 4, 116,
            111, 90, 222, 15, 116, 99, 248, 198, 49, 244, 99, 232, 198, 62, 116, 97, 8, 66, 46, 244, 99, 24, 198, 62,
            252, 33, 232, 66, 31, 252, 33, 232, 66, 16, 116, 97, 120, 198, 46, 140, 99, 248, 198, 49, 226, 16, 132, 33,
            28, 16, 132, 33, 74, 76, 140, 169, 140, 82, 81, 132, 33, 8, 66, 31, 142, 235, 90, 198, 49, 142, 115, 90,
            206, 113, 116, 99, 24, 198, 46, 244, 99, 232, 66, 16, 116, 99, 24, 214, 77, 244, 99, 236, 82, 81, 116, 96,
            224, 134, 46, 249, 8, 66, 16, 132, 140, 99, 24, 198, 46, 140, 99, 24, 197, 68, 140, 99, 90, 215, 113, 140,
            84, 66, 42, 49, 140, 84, 66, 16, 132, 248, 68, 66, 34, 31, 228, 33, 8, 66, 28, 130, 16, 66, 8, 65, 56, 66,
            16, 132, 39, 34, 128, 0, 0, 0, 0, 0, 0, 0, 31, 130, 0, 0, 0, 0, 0, 28, 23, 197, 224, 132, 61, 24, 199, 192,
            0, 29, 24, 69, 192, 8, 95, 24, 197, 224, 0, 29, 31, 193, 224, 50, 56, 132, 33, 0, 0, 29, 24, 188, 62, 132,
            61, 24, 198, 32, 128, 33, 8, 66, 0, 32, 8, 66, 18, 136, 132, 37, 76, 82, 64, 132, 33, 8, 66, 0, 0, 21, 90,
            214, 32, 0, 45, 152, 198, 32, 0, 29, 24, 197, 192, 0, 57, 41, 114, 16, 0, 29, 41, 56, 66, 0, 45, 136, 66, 0,
            0, 31, 7, 7, 192, 66, 56, 132, 33, 128, 0, 35, 24, 197, 192, 0, 35, 21, 40, 128, 0, 35, 26, 213, 64, 0, 34,
            162, 42, 32, 0, 35, 24, 188, 62, 0, 62, 34, 35, 224, 50, 17, 8, 33, 6, 33, 8, 66, 16, 132, 96, 132, 16, 136,
            76, 0, 0, 219, 0, 0, 255, 255, 255, 255, 255
        };

        static readonly byte[] Font5X8Data = {
            0, 0, 0, 0, 0, 253, 180, 0, 0, 0, 21, 245, 125, 64, 35, 224, 195, 7, 196, 6, 50, 34, 34, 99, 100, 164, 198,
            202, 77, 192, 42, 73, 17, 136, 146, 84, 37, 93, 247, 84, 128, 1, 9, 242, 16, 0, 0, 61, 0, 1, 240, 0, 0, 0,
            60, 8, 132, 66, 33, 16, 116, 103, 90, 230, 46, 89, 36, 151, 116, 66, 17, 17, 31, 116, 66, 96, 134, 46, 17,
            149, 47, 136, 66, 252, 33, 224, 134, 46, 116, 97, 232, 198, 46, 248, 66, 34, 16, 132, 116, 98, 232, 198, 46,
            116, 98, 240, 134, 46, 60, 240, 60, 244, 0, 217, 6, 12, 0, 0, 240, 240, 0, 6, 12, 19, 96, 0, 34, 162, 34,
            16, 4, 116, 111, 90, 222, 15, 116, 99, 248, 198, 49, 244, 99, 232, 198, 62, 116, 97, 8, 66, 46, 244, 99, 24,
            198, 62, 252, 33, 232, 66, 31, 252, 33, 232, 66, 16, 116, 97, 120, 198, 46, 140, 99, 248, 198, 49, 233, 36,
            151, 17, 17, 25, 150, 140, 169, 140, 82, 81, 132, 33, 8, 66, 31, 142, 235, 90, 198, 49, 142, 115, 90, 206,
            113, 116, 99, 24, 198, 46, 244, 99, 232, 66, 16, 116, 99, 24, 214, 77, 244, 99, 236, 82, 81, 116, 96, 224,
            134, 46, 249, 8, 66, 16, 132, 140, 99, 24, 198, 46, 140, 99, 24, 197, 68, 140, 99, 90, 215, 113, 140, 84,
            66, 42, 49, 140, 84, 66, 16, 132, 248, 68, 66, 34, 31, 242, 73, 39, 130, 16, 66, 8, 65, 228, 146, 79, 84, 0,
            0, 0, 0, 0, 0, 31, 144, 0, 0, 28, 23, 197, 224, 132, 61, 24, 199, 192, 0, 29, 24, 69, 192, 8, 95, 24, 197,
            224, 0, 29, 31, 193, 224, 52, 228, 68, 64, 0, 29, 24, 188, 62, 132, 61, 24, 198, 32, 190, 32, 146, 106, 136,
            154, 202, 144, 254, 0, 21, 90, 214, 32, 0, 45, 152, 198, 32, 0, 29, 24, 197, 192, 0, 233, 158, 136, 0, 121,
            151, 17, 0, 188, 136, 128, 0, 31, 7, 7, 192, 75, 164, 152, 0, 35, 24, 197, 192, 0, 35, 21, 40, 128, 0, 35,
            26, 213, 64, 0, 34, 162, 42, 32, 0, 35, 24, 188, 62, 0, 62, 34, 35, 224, 52, 72, 132, 67, 255, 194, 33, 18,
            44, 0, 0, 219, 0, 0, 255, 255, 255, 255, 255,
        };

        static readonly byte[] Font5X8Widths = {
            21, 83, 85, 21, 51, 85, 82, 82, 53, 85, 85, 85, 85, 34, 69, 85, 85, 85, 85, 85, 53, 84, 85, 85, 85, 85, 85,
            85, 85, 53, 53, 83, 82, 85, 85, 84, 21, 67, 81, 85, 68, 84, 83, 85, 85, 69, 65, 85,
        };

        static readonly short[] Font5X8Offsets = {
            0, 5, 6, 9, 14, 19, 24, 29, 30, 33, 36, 41, 46, 48, 53, 55, 60, 65, 68, 73, 78, 83, 88, 93, 98, 103, 108,
            110, 112, 117, 121, 126, 131, 136, 141, 146, 151, 156, 161, 166, 171, 176, 179, 183, 188, 193, 198, 203,
            208, 213, 218, 223, 228, 233, 238, 243, 248, 253, 258, 263, 266, 271, 274, 277, 282, 284, 289, 294, 299,
            304, 309, 313, 318, 323, 324, 327, 331, 332, 337, 342, 347, 351, 355, 359, 364, 367, 372, 377, 382, 387,
            392, 397, 401, 402, 406, 411,
        };

        static readonly byte[] Font7X7MonoData = {
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 193, 131, 6, 0, 24, 0, 0, 108, 73, 32, 0, 0, 0, 0, 0, 0, 0, 137, 23, 244,
            95, 209, 34, 0, 0, 0, 33, 252, 135, 194, 127, 8, 0, 0, 1, 132, 16, 65, 4, 16, 67, 0, 0, 0, 194, 68, 134, 18,
            162, 58, 0, 0, 48, 32, 128, 0, 0, 0, 0, 0, 0, 8, 32, 130, 4, 8, 8, 8, 8, 0, 64, 64, 64, 64, 129, 4, 16, 64,
            0, 0, 33, 81, 207, 231, 21, 8, 0, 0, 0, 0, 64, 143, 226, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 16, 64, 0, 0, 0,
            15, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 4, 16, 65, 4, 16, 64, 0, 0, 0, 242, 20, 43, 80, 161, 60,
            0, 0, 0, 32, 192, 129, 2, 4, 8, 0, 0, 0, 242, 16, 65, 4, 16, 126, 0, 0, 0, 242, 16, 33, 128, 161, 60, 0, 0,
            0, 16, 97, 68, 159, 130, 4, 0, 0, 1, 250, 7, 192, 64, 161, 60, 0, 0, 0, 113, 4, 15, 144, 161, 60, 0, 0, 1,
            248, 16, 65, 4, 16, 64, 0, 0, 0, 242, 20, 39, 144, 161, 60, 0, 0, 0, 242, 20, 39, 192, 130, 56, 0, 0, 0, 0,
            1, 128, 0, 0, 24, 0, 0, 0, 0, 1, 128, 0, 0, 24, 16, 64, 0, 16, 65, 4, 4, 4, 4, 0, 0, 0, 0, 7, 240, 31, 192,
            0, 0, 0, 0, 128, 128, 128, 130, 8, 32, 0, 0, 0, 243, 48, 195, 6, 0, 24, 0, 0, 0, 242, 20, 170, 211, 32, 56,
            0, 0, 0, 32, 162, 40, 63, 224, 193, 0, 0, 1, 242, 20, 47, 144, 161, 124, 0, 0, 0, 113, 20, 8, 16, 17, 28, 0,
            0, 1, 226, 36, 40, 80, 162, 120, 0, 0, 1, 250, 4, 15, 16, 32, 126, 0, 0, 1, 250, 4, 15, 16, 32, 64, 0, 0, 0,
            113, 4, 9, 208, 145, 28, 0, 0, 1, 10, 20, 47, 208, 161, 66, 0, 0, 0, 224, 129, 2, 4, 8, 56, 0, 0, 0, 8, 16,
            32, 80, 161, 60, 0, 0, 1, 10, 36, 138, 26, 34, 66, 0, 0, 0, 129, 2, 4, 8, 16, 62, 0, 0, 1, 7, 29, 89, 48,
            96, 193, 0, 0, 1, 11, 21, 41, 81, 161, 66, 0, 0, 0, 242, 20, 40, 80, 161, 60, 0, 0, 1, 242, 20, 47, 144, 32,
            64, 0, 0, 0, 242, 20, 40, 82, 162, 58, 0, 0, 1, 242, 20, 47, 146, 34, 66, 0, 0, 0, 242, 20, 7, 128, 161, 60,
            0, 0, 1, 252, 64, 129, 2, 4, 8, 0, 0, 1, 10, 20, 40, 80, 161, 60, 0, 0, 1, 18, 36, 69, 10, 8, 16, 0, 0, 1,
            6, 12, 24, 50, 106, 162, 0, 0, 0, 137, 17, 65, 5, 17, 34, 0, 0, 0, 137, 18, 34, 130, 4, 8, 0, 0, 0, 252, 16,
            65, 4, 16, 63, 0, 0, 56, 64, 129, 2, 4, 8, 16, 56, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 56, 16, 32, 64, 129, 2, 4,
            56, 0, 0, 32, 162, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 0, 24, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 3,
            192, 79, 161, 62, 0, 0, 1, 2, 7, 200, 80, 161, 124, 0, 0, 0, 0, 3, 200, 80, 33, 60, 0, 0, 0, 8, 19, 232, 80,
            161, 62, 0, 0, 0, 0, 3, 200, 95, 160, 60, 0, 0, 0, 97, 34, 14, 8, 16, 32, 0, 0, 0, 0, 3, 200, 145, 34, 60,
            8, 224, 0, 129, 2, 198, 72, 145, 34, 0, 0, 0, 64, 3, 2, 4, 8, 56, 0, 0, 0, 16, 0, 192, 129, 2, 4, 72, 96, 0,
            129, 2, 69, 12, 20, 36, 0, 0, 0, 96, 64, 129, 2, 4, 8, 0, 0, 0, 0, 7, 105, 50, 100, 201, 0, 0, 0, 0, 5, 204,
            80, 161, 66, 0, 0, 0, 0, 3, 200, 80, 161, 60, 0, 0, 0, 0, 7, 200, 80, 161, 124, 129, 0, 0, 0, 3, 232, 80,
            161, 62, 4, 8, 0, 0, 5, 204, 80, 32, 64, 0, 0, 0, 0, 3, 232, 15, 1, 124, 0, 0, 0, 32, 67, 225, 2, 5, 4, 0,
            0, 0, 0, 4, 40, 80, 163, 58, 0, 0, 0, 0, 4, 72, 138, 20, 16, 0, 0, 0, 0, 4, 24, 42, 149, 20, 0, 0, 0, 0, 2,
            34, 130, 10, 34, 0, 0, 0, 0, 2, 36, 72, 145, 30, 4, 112, 0, 0, 3, 224, 130, 8, 62, 0, 0, 12, 32, 64, 134, 2,
            4, 8, 12, 0, 16, 32, 64, 128, 2, 4, 8, 16, 0, 96, 32, 64, 128, 194, 4, 8, 96, 0, 0, 130, 160, 128, 0, 0, 0,
            0, 0, 1, 251, 247, 239, 223, 191, 126, 0, 0
        };

        static readonly byte[] Font8X11MonoData = {
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 24, 0, 0, 24, 24, 0, 0, 54, 54, 54, 54, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 102, 255, 102, 102, 255, 102, 102, 0, 0, 0, 24, 126, 255, 216, 248, 126, 31,
            27, 255, 126, 24, 0, 0, 112, 216, 219, 118, 12, 24, 48, 110, 219, 27, 14, 0, 0, 56, 108, 204, 204, 216, 112,
            112, 216, 207, 198, 127, 0, 0, 14, 12, 28, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 24, 48, 48, 48, 48, 48, 48,
            48, 24, 12, 0, 0, 48, 24, 12, 12, 12, 12, 12, 12, 12, 24, 48, 0, 0, 0, 0, 153, 90, 60, 255, 60, 90, 153, 0,
            0, 0, 0, 0, 0, 24, 24, 24, 255, 255, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 28, 24, 48, 0, 0, 0, 0,
            0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 56, 0, 0, 0, 3, 3, 6, 6, 12, 12, 24, 24,
            48, 48, 96, 96, 0, 60, 102, 195, 199, 207, 219, 243, 227, 195, 102, 60, 0, 0, 24, 56, 120, 24, 24, 24, 24,
            24, 24, 24, 126, 0, 0, 126, 231, 3, 6, 12, 24, 48, 96, 192, 255, 255, 0, 0, 126, 231, 3, 3, 7, 126, 7, 3, 3,
            231, 126, 0, 0, 12, 28, 60, 108, 204, 255, 12, 12, 12, 12, 12, 0, 0, 255, 255, 192, 192, 192, 254, 63, 3, 3,
            231, 126, 0, 0, 126, 231, 192, 192, 192, 254, 199, 195, 195, 231, 126, 0, 0, 255, 255, 3, 3, 6, 12, 24, 48,
            48, 48, 48, 0, 0, 126, 231, 195, 195, 231, 126, 231, 195, 195, 231, 126, 0, 0, 126, 231, 195, 195, 231, 127,
            3, 3, 3, 231, 126, 0, 0, 0, 0, 0, 0, 56, 56, 0, 0, 56, 56, 0, 0, 0, 0, 0, 0, 28, 28, 0, 0, 28, 28, 24, 48,
            0, 0, 6, 12, 24, 48, 96, 192, 96, 48, 24, 12, 6, 0, 0, 0, 0, 0, 255, 255, 0, 255, 255, 0, 0, 0, 0, 0, 96,
            48, 24, 12, 6, 3, 6, 12, 24, 48, 96, 0, 0, 126, 195, 195, 3, 6, 12, 24, 24, 0, 0, 24, 0, 0, 0, 126, 195,
            221, 213, 213, 221, 207, 96, 63, 0, 0, 0, 24, 60, 102, 195, 195, 255, 255, 195, 195, 195, 195, 0, 0, 254,
            199, 195, 195, 199, 254, 199, 195, 195, 199, 254, 0, 0, 126, 255, 231, 192, 192, 192, 192, 192, 231, 255,
            126, 0, 0, 252, 206, 199, 195, 195, 195, 195, 195, 199, 206, 252, 0, 0, 255, 255, 192, 192, 192, 252, 192,
            192, 192, 255, 255, 0, 0, 255, 255, 192, 192, 252, 192, 192, 192, 192, 192, 192, 0, 0, 126, 255, 231, 192,
            192, 207, 207, 195, 231, 255, 126, 0, 0, 195, 195, 195, 195, 255, 255, 195, 195, 195, 195, 195, 0, 0, 126,
            126, 24, 24, 24, 24, 24, 24, 24, 126, 126, 0, 0, 6, 6, 6, 6, 6, 6, 6, 198, 238, 254, 124, 0, 0, 195, 198,
            204, 216, 240, 224, 240, 216, 204, 198, 195, 0, 0, 192, 192, 192, 192, 192, 192, 192, 192, 192, 255, 255, 0,
            0, 195, 231, 255, 255, 219, 195, 195, 195, 195, 195, 195, 0, 0, 227, 227, 243, 243, 251, 219, 223, 207, 207,
            199, 199, 0, 0, 126, 255, 231, 195, 195, 195, 195, 195, 235, 255, 126, 0, 0, 254, 255, 199, 195, 199, 254,
            252, 192, 192, 192, 192, 0, 0, 60, 102, 195, 195, 195, 195, 195, 219, 223, 110, 63, 0, 0, 254, 255, 199,
            195, 199, 254, 240, 216, 204, 198, 195, 0, 0, 126, 255, 199, 192, 224, 126, 7, 3, 227, 255, 126, 0, 0, 255,
            255, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 195, 195, 195, 195, 195, 195, 195, 195, 231, 255, 126, 0, 0,
            195, 195, 195, 195, 195, 195, 102, 102, 60, 60, 24, 0, 0, 195, 195, 195, 195, 195, 219, 219, 255, 255, 231,
            195, 0, 0, 195, 102, 102, 60, 60, 24, 60, 60, 102, 102, 195, 0, 0, 195, 102, 102, 60, 60, 24, 24, 24, 24,
            24, 24, 0, 0, 255, 255, 3, 6, 12, 24, 48, 96, 192, 255, 255, 0, 0, 60, 60, 48, 48, 48, 48, 48, 48, 48, 60,
            60, 0, 0, 96, 96, 48, 48, 24, 24, 12, 12, 6, 6, 3, 3, 0, 60, 60, 12, 12, 12, 12, 12, 12, 12, 60, 60, 0, 0,
            24, 60, 102, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 112, 48, 56, 24, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 195, 3, 127, 195, 195, 127, 0, 0, 192, 192, 192, 192, 192, 254,
            195, 195, 195, 195, 254, 0, 0, 0, 0, 0, 0, 126, 195, 192, 192, 192, 195, 126, 0, 0, 3, 3, 3, 3, 3, 127, 195,
            195, 195, 195, 127, 0, 0, 0, 0, 0, 0, 126, 195, 195, 254, 192, 192, 127, 0, 0, 30, 51, 48, 48, 48, 252, 48,
            48, 48, 48, 48, 0, 0, 0, 0, 0, 0, 126, 195, 195, 195, 127, 3, 3, 195, 126, 192, 192, 192, 192, 254, 195,
            195, 195, 195, 195, 195, 0, 0, 0, 24, 0, 0, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 12, 0, 0, 12, 12, 12, 12,
            12, 12, 12, 108, 56, 192, 192, 192, 192, 198, 204, 216, 240, 248, 204, 198, 0, 0, 120, 24, 24, 24, 24, 24,
            24, 24, 24, 24, 126, 0, 0, 0, 0, 0, 0, 254, 219, 219, 219, 219, 219, 219, 0, 0, 0, 0, 0, 0, 252, 198, 198,
            198, 198, 198, 198, 0, 0, 0, 0, 0, 0, 124, 198, 198, 198, 198, 198, 124, 0, 0, 0, 0, 0, 0, 254, 195, 195,
            195, 195, 254, 192, 192, 192, 0, 0, 0, 0, 127, 195, 195, 195, 195, 127, 3, 3, 3, 0, 0, 0, 0, 254, 224, 192,
            192, 192, 192, 192, 0, 0, 0, 0, 0, 0, 127, 192, 192, 126, 3, 3, 254, 0, 0, 0, 48, 48, 48, 252, 48, 48, 48,
            48, 54, 28, 0, 0, 0, 0, 0, 0, 198, 198, 198, 198, 198, 198, 126, 0, 0, 0, 0, 0, 0, 195, 195, 102, 102, 60,
            60, 24, 0, 0, 0, 0, 0, 0, 195, 195, 195, 219, 255, 231, 195, 0, 0, 0, 0, 0, 0, 195, 102, 60, 24, 60, 102,
            195, 0, 0, 0, 0, 0, 0, 195, 102, 102, 60, 24, 48, 96, 96, 192, 0, 0, 0, 0, 255, 6, 12, 24, 48, 96, 255, 0,
            0, 15, 31, 24, 24, 56, 240, 56, 24, 24, 31, 15, 0, 0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
            240, 248, 24, 24, 28, 15, 28, 24, 24, 248, 240, 0, 0, 0, 0, 0, 96, 241, 143, 6, 0, 0, 0, 0, 0, 0, 0, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0
        };

        static readonly byte[] Font10X13MonoData = {
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 192, 48, 12, 3, 0, 192, 48, 12,
            3, 0, 192, 0, 0, 3, 0, 192, 0, 0, 0, 99, 24, 198, 49, 140, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 4, 65, 16, 204, 34, 8, 143, 252, 136, 102, 17, 15, 249, 16, 204, 34, 8, 128, 0, 0, 0, 24, 15, 135,
            243, 228, 216, 54, 7, 128, 224, 30, 7, 193, 176, 108, 155, 63, 135, 224, 96, 0, 0, 0, 28, 29, 139, 100, 219,
            54, 135, 64, 32, 8, 5, 194, 217, 182, 77, 163, 96, 112, 0, 0, 0, 0, 15, 7, 225, 152, 102, 27, 3, 128, 192,
            120, 255, 60, 207, 30, 199, 191, 231, 220, 0, 0, 0, 24, 6, 1, 128, 96, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 129, 224, 240, 112, 24, 14, 3, 0, 192, 48, 12, 3, 0, 192, 56, 6, 1, 192, 60, 7, 128, 192,
            60, 7, 128, 112, 12, 3, 128, 96, 24, 6, 1, 128, 96, 24, 14, 3, 1, 193, 224, 240, 0, 0, 6, 1, 131, 108, 231,
            6, 3, 193, 152, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 192, 48, 12, 63, 255, 252, 48,
            12, 3, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 7, 1, 192, 48, 12, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 127, 31, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28,
            7, 1, 192, 0, 0, 0, 1, 128, 192, 48, 12, 6, 1, 128, 224, 48, 12, 6, 1, 128, 224, 48, 12, 6, 1, 128, 96, 0,
            0, 15, 135, 241, 140, 227, 176, 108, 27, 6, 193, 176, 108, 27, 142, 99, 31, 195, 224, 0, 0, 0, 0, 15, 15,
            195, 48, 12, 3, 0, 192, 48, 12, 3, 0, 192, 48, 12, 63, 255, 252, 0, 0, 0, 0, 15, 135, 241, 14, 1, 128, 96,
            56, 12, 6, 3, 1, 128, 192, 96, 31, 231, 248, 0, 0, 0, 0, 31, 135, 241, 28, 3, 1, 131, 192, 248, 7, 0, 192,
            48, 12, 71, 31, 135, 192, 0, 0, 0, 0, 1, 128, 224, 120, 54, 25, 140, 98, 24, 134, 63, 239, 248, 24, 6, 1,
            128, 96, 0, 0, 0, 0, 31, 199, 241, 128, 96, 24, 7, 193, 248, 7, 0, 192, 48, 12, 71, 31, 135, 192, 0, 0, 0,
            0, 7, 195, 241, 196, 96, 48, 13, 227, 252, 227, 176, 108, 27, 134, 99, 159, 195, 224, 0, 0, 0, 0, 63, 207,
            240, 12, 6, 1, 128, 192, 48, 24, 6, 3, 0, 192, 112, 24, 6, 0, 0, 0, 0, 0, 15, 135, 241, 140, 99, 28, 195,
            224, 248, 111, 56, 236, 27, 6, 227, 159, 195, 224, 0, 0, 0, 0, 15, 135, 243, 140, 195, 176, 108, 27, 142,
            127, 143, 96, 24, 12, 71, 31, 135, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 192, 112, 0, 0, 0, 0, 0, 28, 7, 1,
            192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 192, 112, 0, 0, 0, 0, 0, 28, 7, 1, 192, 48, 12, 0, 0, 0, 0, 0, 0, 0,
            0, 32, 56, 60, 28, 28, 7, 0, 112, 15, 0, 224, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 251, 254, 0, 0, 15, 251,
            254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 14, 1, 224, 28, 1, 192, 112, 112, 120, 56, 8, 0, 0, 0, 0, 0,
            31, 143, 243, 14, 1, 128, 96, 48, 24, 12, 6, 1, 128, 0, 0, 6, 1, 128, 0, 0, 0, 0, 0, 1, 241, 204, 97, 177,
            236, 219, 38, 217, 182, 237, 187, 54, 205, 208, 6, 16, 124, 0, 0, 0, 0, 0, 0, 0, 28, 7, 3, 224, 216, 54, 25,
            198, 49, 252, 255, 176, 108, 30, 3, 0, 0, 0, 0, 0, 0, 0, 255, 63, 236, 59, 6, 195, 191, 143, 243, 14, 193,
            176, 239, 251, 252, 0, 0, 0, 0, 0, 0, 0, 31, 143, 247, 7, 128, 192, 48, 12, 3, 0, 224, 30, 19, 252, 126, 0,
            0, 0, 0, 0, 0, 0, 254, 63, 236, 59, 7, 192, 240, 60, 15, 3, 193, 240, 239, 243, 248, 0, 0, 0, 0, 0, 0, 0,
            127, 159, 230, 1, 128, 96, 31, 199, 241, 128, 96, 24, 7, 249, 254, 0, 0, 0, 0, 0, 0, 0, 127, 159, 230, 1,
            128, 96, 31, 199, 241, 128, 96, 24, 6, 1, 128, 0, 0, 0, 0, 0, 0, 0, 63, 31, 238, 11, 0, 192, 49, 236, 123,
            6, 193, 188, 103, 248, 254, 0, 0, 0, 0, 0, 0, 0, 193, 176, 108, 27, 6, 193, 191, 239, 251, 6, 193, 176, 108,
            27, 6, 0, 0, 0, 0, 0, 0, 0, 255, 63, 193, 128, 96, 24, 6, 1, 128, 96, 24, 6, 15, 243, 252, 0, 0, 0, 0, 0, 0,
            0, 63, 15, 192, 48, 12, 3, 0, 192, 48, 12, 3, 1, 199, 225, 240, 0, 0, 0, 0, 0, 0, 0, 195, 177, 204, 227, 48,
            216, 60, 15, 131, 112, 206, 49, 204, 59, 7, 0, 0, 0, 0, 0, 0, 0, 96, 24, 6, 1, 128, 96, 24, 6, 1, 128, 96,
            24, 7, 249, 254, 0, 0, 0, 0, 0, 0, 0, 225, 248, 127, 63, 203, 210, 247, 189, 239, 51, 204, 240, 60, 15, 3,
            0, 0, 0, 0, 0, 0, 0, 112, 220, 55, 141, 227, 124, 219, 54, 109, 159, 99, 216, 246, 29, 135, 0, 0, 0, 0, 0,
            0, 0, 30, 31, 231, 59, 135, 192, 240, 60, 15, 3, 225, 220, 231, 248, 120, 0, 0, 0, 0, 0, 0, 0, 255, 63, 236,
            59, 6, 195, 191, 207, 227, 0, 192, 48, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 231, 59, 135, 192, 240, 60,
            15, 3, 225, 220, 227, 240, 124, 3, 128, 0, 0, 0, 0, 0, 254, 63, 204, 115, 12, 199, 63, 143, 195, 56, 199,
            48, 204, 59, 7, 0, 0, 0, 0, 0, 0, 0, 62, 63, 204, 19, 0, 240, 31, 129, 240, 14, 1, 176, 239, 241, 248, 0, 0,
            0, 0, 0, 0, 0, 255, 255, 240, 192, 48, 12, 3, 0, 192, 48, 12, 3, 0, 192, 48, 0, 0, 0, 0, 0, 0, 0, 193, 176,
            108, 27, 6, 193, 176, 108, 27, 6, 193, 184, 231, 240, 248, 0, 0, 0, 0, 0, 0, 0, 128, 240, 124, 27, 134, 97,
            156, 195, 48, 204, 62, 7, 129, 224, 48, 0, 0, 0, 0, 0, 0, 0, 128, 224, 56, 15, 51, 204, 179, 45, 203, 90,
            214, 189, 238, 49, 140, 0, 0, 0, 0, 0, 0, 0, 192, 248, 102, 49, 216, 62, 7, 1, 192, 248, 39, 24, 204, 58, 7,
            0, 0, 0, 0, 0, 0, 0, 192, 240, 102, 25, 204, 51, 7, 129, 192, 48, 12, 3, 0, 192, 48, 0, 0, 0, 0, 0, 0, 0,
            255, 255, 240, 28, 14, 7, 3, 129, 192, 224, 112, 56, 15, 255, 255, 0, 0, 0, 0, 0, 0, 126, 31, 134, 1, 128,
            96, 24, 6, 1, 128, 96, 24, 6, 1, 128, 126, 31, 128, 0, 0, 0, 1, 128, 96, 12, 3, 0, 224, 24, 6, 0, 192, 48,
            14, 1, 128, 96, 12, 3, 0, 0, 0, 0, 1, 248, 126, 1, 128, 96, 24, 6, 1, 128, 96, 24, 6, 1, 128, 97, 248, 126,
            0, 0, 0, 0, 0, 32, 28, 7, 1, 64, 216, 54, 24, 198, 49, 140, 193, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 255, 255, 0, 0, 0, 0, 1, 128, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 127, 16, 192, 48, 252, 99, 48, 204, 115, 255, 121, 192, 0, 0, 12,
            3, 0, 192, 48, 12, 3, 120, 255, 56, 236, 27, 6, 193, 176, 110, 59, 252, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            126, 127, 156, 46, 3, 0, 192, 56, 15, 9, 254, 31, 0, 0, 0, 0, 24, 6, 1, 128, 96, 24, 246, 127, 184, 236, 27,
            6, 193, 176, 110, 57, 254, 61, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 127, 24, 236, 27, 254, 255, 176, 14, 9,
            254, 63, 0, 0, 0, 0, 252, 127, 28, 6, 1, 131, 255, 255, 198, 1, 128, 96, 24, 6, 1, 128, 96, 24, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 246, 127, 184, 236, 27, 6, 193, 176, 110, 57, 254, 61, 128, 0, 0, 12, 3, 0, 192, 48, 12,
            3, 60, 255, 188, 236, 27, 6, 193, 176, 108, 27, 6, 193, 128, 0, 0, 0, 0, 48, 12, 0, 0, 3, 240, 252, 3, 0,
            192, 48, 12, 3, 0, 192, 48, 12, 0, 0, 0, 0, 0, 24, 6, 0, 0, 1, 248, 126, 1, 128, 96, 24, 6, 1, 128, 96, 24,
            6, 0, 0, 0, 12, 3, 0, 192, 48, 12, 3, 28, 206, 55, 13, 131, 224, 216, 55, 12, 227, 28, 195, 128, 0, 0, 7,
            225, 248, 6, 1, 128, 96, 24, 6, 1, 128, 96, 24, 6, 1, 128, 96, 24, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 102,
            255, 251, 188, 207, 51, 204, 243, 60, 207, 51, 204, 192, 0, 0, 0, 0, 0, 0, 0, 0, 1, 158, 127, 222, 118, 13,
            131, 96, 216, 54, 13, 131, 96, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 127, 184, 124, 15, 3, 192, 240, 62, 29,
            254, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 120, 255, 56, 236, 27, 6, 193, 176, 110, 59, 252, 222, 0, 0, 64, 0,
            0, 0, 0, 0, 0, 0, 246, 127, 184, 236, 27, 6, 193, 176, 110, 57, 254, 61, 128, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            188, 127, 30, 70, 1, 128, 96, 24, 6, 1, 128, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 127, 24, 7, 0, 248, 15,
            0, 228, 25, 254, 62, 0, 0, 0, 0, 0, 0, 0, 6, 1, 131, 255, 255, 198, 1, 128, 96, 24, 6, 1, 192, 127, 15, 192,
            0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 193, 176, 108, 27, 6, 193, 176, 110, 123, 254, 121, 128, 0, 0, 0, 0, 0, 0, 0,
            0, 3, 6, 99, 152, 199, 48, 204, 50, 7, 129, 224, 120, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 140, 231, 61,
            203, 82, 246, 189, 238, 59, 140, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 134, 115, 13, 131, 224, 112, 28, 15, 130,
            97, 156, 195, 128, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 225, 24, 199, 48, 216, 54, 15, 129, 192, 112, 8, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 3, 254, 255, 128, 192, 96, 48, 24, 12, 6, 3, 254, 255, 128, 0, 0, 0, 0, 0, 7, 131, 224,
            224, 48, 12, 3, 3, 128, 224, 12, 3, 0, 192, 56, 15, 128, 0, 0, 0, 0, 0, 12, 3, 0, 192, 48, 12, 3, 0, 192,
            48, 12, 3, 0, 192, 48, 12, 0, 0, 0, 0, 0, 0, 120, 31, 1, 192, 48, 12, 3, 0, 112, 28, 12, 3, 0, 192, 112,
            124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 139, 254, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 192
        };

        // standard ascii 4x4 font
        // defines ascii characters 0x20-0x5F (32-96)
        static readonly byte[] Font4x4Data = {
240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
240, 240, 240, 240, 240, 240, 240, 240, 240, 208, 240, 240, 208, 128, 208, 240,
240, 176, 208, 240, 208, 208, 208, 240, 240, 176, 240, 240, 176, 208, 224, 240,
128, 160, 128, 240, 160, 128, 176, 240, 224, 128, 176, 240, 160, 128, 128, 240,
192, 208, 128, 240, 176, 128, 224, 240, 128, 144, 144, 240, 224, 224, 128, 240,
144, 128, 128, 240, 192, 192, 128, 240, 240, 160, 240, 240, 176, 160, 240, 240,
208, 160, 240, 240, 240, 160, 160, 240, 240, 160, 208, 240, 240, 160, 192, 240,
240, 240, 240, 240, 144, 192, 144, 240, 128, 128, 144, 240, 128, 160, 160, 240,
128, 160, 208, 240, 128, 128, 160, 240, 128, 192, 224, 240, 128, 160, 144, 240,
128, 208, 128, 240, 160, 128, 160, 240, 144, 176, 128, 240, 128, 208, 160, 240,
128, 176, 176, 240, 128, 192, 128, 240, 128, 224, 128, 240, 128, 160, 128, 240,
128, 192, 192, 240, 192, 192, 128, 240, 128, 224, 224, 240, 176, 128, 224, 240,
224, 128, 224, 240, 128, 176, 128, 240, 192, 176, 192, 240, 128, 144, 128, 240,
160, 208, 160, 240, 224, 144, 224, 240, 224, 128, 176, 240, 128, 160, 240, 240,
224, 208, 176, 240, 240, 160, 128, 240, 208, 224, 208, 240, 176, 176, 176, 240
};

        // standard ascii 4x6 font
        // defines ascii characters 0x00-0x7F (0-127)
        static readonly byte[] Font4x6AData = {
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 128, 128, 252,
252, 252, 252, 252, 252, 160, 252, 252, 240, 252, 240, 252, 128, 212, 128, 252,
212, 128, 232, 252, 216, 236, 180, 252, 192, 160, 140, 252, 252, 240, 252, 252,
252, 196, 184, 252, 184, 196, 252, 252, 232, 244, 232, 252, 236, 196, 236, 252,
188, 220, 252, 252, 236, 236, 236, 252, 252, 188, 252, 252, 156, 236, 240, 252,
132, 184, 192, 252, 244, 128, 252, 252, 152, 168, 180, 252, 184, 168, 212, 252,
224, 236, 128, 252, 160, 168, 216, 252, 132, 168, 136, 252, 152, 232, 240, 252,
128, 168, 128, 252, 160, 168, 192, 252, 252, 212, 252, 252, 188, 212, 252, 252,
236, 212, 184, 252, 212, 212, 212, 252, 184, 212, 236, 252, 248, 168, 240, 252,
196, 168, 164, 252, 132, 232, 132, 252, 128, 168, 212, 252, 196, 184, 184, 252,
128, 184, 196, 252, 128, 168, 168, 252, 128, 232, 232, 252, 196, 168, 136, 252,
128, 236, 128, 252, 184, 128, 184, 252, 220, 188, 192, 252, 128, 236, 144, 252,
128, 188, 188, 252, 128, 228, 128, 252, 128, 196, 128, 252, 196, 184, 196, 252,
128, 232, 244, 252, 196, 152, 132, 252, 128, 200, 164, 252, 180, 168, 216, 252,
248, 128, 248, 252, 192, 188, 128, 252, 224, 156, 224, 252, 128, 204, 128, 252,
144, 236, 144, 252, 240, 140, 240, 252, 152, 168, 176, 252, 128, 184, 184, 252,
244, 236, 220, 252, 184, 184, 128, 252, 244, 248, 244, 252, 188, 188, 188, 252,
248, 244, 252, 252, 148, 164, 140, 252, 128, 180, 204, 252, 204, 180, 180, 252,
204, 180, 128, 252, 204, 148, 164, 252, 236, 132, 232, 252, 204,  84, 132, 252,
128, 244, 140, 252, 252, 136, 252, 252, 188, 124, 136, 252, 128, 204, 180, 252,
184, 128, 188, 252, 132, 196, 132, 252, 132, 244, 140, 252, 204, 180, 204, 252,
  4, 180, 204, 252, 204, 180,   4, 252, 140, 244, 244, 252, 172, 132, 212, 252,
244, 128, 180, 252, 196, 188, 132, 252, 196, 156, 196, 252, 132, 140, 132, 252,
180, 204, 180, 252, 228,  92, 132, 252, 148, 132, 164, 252, 236, 144, 184, 252,
252, 144, 252, 252, 184, 144, 236, 252, 244, 240, 248, 252, 128, 128, 128, 252
};

        // standard ascii 4x6 font
        // defines ascii characters 0x00-0x7F (0-127)
        static readonly byte[] Font4x6BData = {
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252,
128, 184, 128, 252, 128, 184, 128, 252, 128, 184, 128, 252, 128, 128, 128, 252,
252, 252, 252, 252, 252, 160, 252, 252, 240, 252, 240, 252, 128, 212, 128, 252,
212, 128, 232, 252, 216, 236, 180, 252, 212, 168, 148, 252, 252, 240, 252, 252,
252, 196, 184, 252, 184, 196, 252, 252, 168, 196, 168, 252, 236, 196, 236, 252,
188, 220, 252, 252, 236, 236, 236, 252, 252, 156, 252, 252, 220, 236, 244, 252,
128, 184, 128, 252, 252, 128, 252, 252, 136, 168, 160, 252, 184, 168, 128, 252,
224, 236, 128, 252, 160, 168, 136, 252, 128, 168, 136, 252, 248, 248, 128, 252,
128, 168, 128, 252, 160, 168, 128, 252, 252, 212, 252, 252, 188, 212, 252, 252,
236, 212, 184, 252, 212, 212, 212, 252, 184, 212, 236, 252, 248, 168, 240, 252,
196, 168, 164, 252, 132, 232, 132, 252, 128, 168, 212, 252, 196, 184, 184, 252,
128, 184, 196, 252, 128, 168, 168, 252, 128, 232, 232, 252, 196, 168, 136, 252,
128, 236, 128, 252, 184, 128, 184, 252, 220, 188, 192, 252, 128, 236, 144, 252,
128, 188, 188, 252, 128, 228, 128, 252, 128, 196, 128, 252, 196, 184, 196, 252,
128, 232, 244, 252, 196, 152, 132, 252, 128, 200, 164, 252, 180, 168, 216, 252,
248, 128, 248, 252, 192, 188, 128, 252, 224, 156, 224, 252, 128, 204, 128, 252,
144, 236, 144, 252, 240, 140, 240, 252, 152, 168, 176, 252, 128, 184, 184, 252,
244, 236, 220, 252, 184, 184, 128, 252, 244, 248, 244, 252, 188, 188, 188, 252,
248, 244, 252, 252, 156, 172, 140, 252, 128, 172, 220, 252, 220, 172, 172, 252,
220, 172, 128, 252, 204, 148, 164, 252, 236, 132, 232, 252, 172, 164, 196, 252,
128, 236, 156, 252, 252, 136, 252, 252, 188, 188, 200, 252, 132, 220, 172, 252,
184, 128, 188, 252, 140, 204, 140, 252, 140, 236, 156, 252, 220, 172, 220, 252,
140, 212, 236, 252, 236, 212, 140, 252, 132, 236, 236, 252, 172, 132, 212, 252,
244, 128, 244, 252, 204, 188, 140, 252, 204, 156, 204, 252, 140, 156, 140, 252,
172, 220, 172, 252, 180, 172, 196, 252, 148, 132, 164, 252, 236, 144, 184, 252,
252, 144, 252, 252, 184, 144, 236, 252, 244, 240, 248, 252, 128, 128, 128, 252
};

        // standard ascii 5x7 font
        // defines ascii characters 0x20-0x7F (32-127)
        static readonly byte[] Font5X7Data =
        {
            0x00, 0x00, 0x00, 0x00, 0x00, // (space)
            0x00, 0x00, 0x5F, 0x00, 0x00, // !
            0x00, 0x07, 0x00, 0x07, 0x00, // "
            0x14, 0x7F, 0x14, 0x7F, 0x14, // #
            0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
            0x23, 0x13, 0x08, 0x64, 0x62, // %
            0x36, 0x49, 0x55, 0x22, 0x50, // &
            0x00, 0x05, 0x03, 0x00, 0x00, // '
            0x00, 0x1C, 0x22, 0x41, 0x00, // (
            0x00, 0x41, 0x22, 0x1C, 0x00, // )
            0x08, 0x2A, 0x1C, 0x2A, 0x08, // *
            0x08, 0x08, 0x3E, 0x08, 0x08, // +
            0x00, 0x50, 0x30, 0x00, 0x00, // ,
            0x08, 0x08, 0x08, 0x08, 0x08, // -
            0x00, 0x60, 0x60, 0x00, 0x00, // .
            0x20, 0x10, 0x08, 0x04, 0x02, // /
            0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
            0x00, 0x42, 0x7F, 0x40, 0x00, // 1
            0x42, 0x61, 0x51, 0x49, 0x46, // 2
            0x21, 0x41, 0x45, 0x4B, 0x31, // 3
            0x18, 0x14, 0x12, 0x7F, 0x10, // 4
            0x27, 0x45, 0x45, 0x45, 0x39, // 5
            0x3C, 0x4A, 0x49, 0x49, 0x30, // 6
            0x01, 0x71, 0x09, 0x05, 0x03, // 7
            0x36, 0x49, 0x49, 0x49, 0x36, // 8
            0x06, 0x49, 0x49, 0x29, 0x1E, // 9
            0x00, 0x36, 0x36, 0x00, 0x00, // :
            0x00, 0x56, 0x36, 0x00, 0x00, // ;
            0x00, 0x08, 0x14, 0x22, 0x41, // <
            0x14, 0x14, 0x14, 0x14, 0x14, // =
            0x41, 0x22, 0x14, 0x08, 0x00, // >
            0x02, 0x01, 0x51, 0x09, 0x06, // ?
            0x32, 0x49, 0x79, 0x41, 0x3E, // @
            0x7E, 0x11, 0x11, 0x11, 0x7E, // A
            0x7F, 0x49, 0x49, 0x49, 0x36, // B
            0x3E, 0x41, 0x41, 0x41, 0x22, // C
            0x7F, 0x41, 0x41, 0x22, 0x1C, // D
            0x7F, 0x49, 0x49, 0x49, 0x41, // E
            0x7F, 0x09, 0x09, 0x01, 0x01, // F
            0x3E, 0x41, 0x41, 0x51, 0x32, // G
            0x7F, 0x08, 0x08, 0x08, 0x7F, // H
            0x00, 0x41, 0x7F, 0x41, 0x00, // I
            0x20, 0x40, 0x41, 0x3F, 0x01, // J
            0x7F, 0x08, 0x14, 0x22, 0x41, // K
            0x7F, 0x40, 0x40, 0x40, 0x40, // L
            0x7F, 0x02, 0x04, 0x02, 0x7F, // M
            0x7F, 0x04, 0x08, 0x10, 0x7F, // N
            0x3E, 0x41, 0x41, 0x41, 0x3E, // O
            0x7F, 0x09, 0x09, 0x09, 0x06, // P
            0x3E, 0x41, 0x51, 0x21, 0x5E, // Q
            0x7F, 0x09, 0x19, 0x29, 0x46, // R
            0x46, 0x49, 0x49, 0x49, 0x31, // S
            0x01, 0x01, 0x7F, 0x01, 0x01, // T
            0x3F, 0x40, 0x40, 0x40, 0x3F, // U
            0x1F, 0x20, 0x40, 0x20, 0x1F, // V
            0x7F, 0x20, 0x18, 0x20, 0x7F, // W
            0x63, 0x14, 0x08, 0x14, 0x63, // X
            0x03, 0x04, 0x78, 0x04, 0x03, // Y
            0x61, 0x51, 0x49, 0x45, 0x43, // Z
            0x00, 0x00, 0x7F, 0x41, 0x41, // [
            0x02, 0x04, 0x08, 0x10, 0x20, // "\"
            0x41, 0x41, 0x7F, 0x00, 0x00, // ]
            0x04, 0x02, 0x01, 0x02, 0x04, // ^
            0x40, 0x40, 0x40, 0x40, 0x40, // _
            0x00, 0x01, 0x02, 0x04, 0x00, // `
            0x20, 0x54, 0x54, 0x54, 0x78, // a
            0x7F, 0x48, 0x44, 0x44, 0x38, // b
            0x38, 0x44, 0x44, 0x44, 0x20, // c
            0x38, 0x44, 0x44, 0x48, 0x7F, // d
            0x38, 0x54, 0x54, 0x54, 0x18, // e
            0x08, 0x7E, 0x09, 0x01, 0x02, // f
            0x08, 0x14, 0x54, 0x54, 0x3C, // g
            0x7F, 0x08, 0x04, 0x04, 0x78, // h
            0x00, 0x44, 0x7D, 0x40, 0x00, // i
            0x20, 0x40, 0x44, 0x3D, 0x00, // j
            0x00, 0x7F, 0x10, 0x28, 0x44, // k
            0x00, 0x41, 0x7F, 0x40, 0x00, // l
            0x7C, 0x04, 0x18, 0x04, 0x78, // m
            0x7C, 0x08, 0x04, 0x04, 0x78, // n
            0x38, 0x44, 0x44, 0x44, 0x38, // o
            0x7C, 0x14, 0x14, 0x14, 0x08, // p
            0x08, 0x14, 0x14, 0x18, 0x7C, // q
            0x7C, 0x08, 0x04, 0x04, 0x08, // r
            0x48, 0x54, 0x54, 0x54, 0x20, // s
            0x04, 0x3F, 0x44, 0x40, 0x20, // t
            0x3C, 0x40, 0x40, 0x20, 0x7C, // u
            0x1C, 0x20, 0x40, 0x20, 0x1C, // v
            0x3C, 0x40, 0x30, 0x40, 0x3C, // w
            0x44, 0x28, 0x10, 0x28, 0x44, // x
            0x0C, 0x50, 0x50, 0x50, 0x3C, // y
            0x44, 0x64, 0x54, 0x4C, 0x44, // z
            0x00, 0x08, 0x36, 0x41, 0x00, // {
            0x00, 0x00, 0x7F, 0x00, 0x00, // |
            0x00, 0x41, 0x36, 0x08, 0x00, // }
            0x08, 0x08, 0x2A, 0x1C, 0x08, // ->
            0x08, 0x1C, 0x2A, 0x08, 0x08 // <-
        };
        // VGA 9x16 font, all 256 chars
        static byte [] Font9x16Data = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  0  = ' ?? '
0xf8, 0x07, 0x04, 0x08, 0x94, 0x08, 0x84, 0x09, 0x84, 0x09, 0x94, 0x08, 0x04, 0x08, 0xf8, 0x07, 0x00, 0x00,  //  1  = ' ?? '
0xf8, 0x07, 0xfc, 0x0f, 0x6c, 0x0f, 0x7c, 0x0e, 0x7c, 0x0e, 0x6c, 0x0f, 0xfc, 0x0f, 0xf8, 0x07, 0x00, 0x00,  //  2  = ' ?? '
0xe0, 0x01, 0xf0, 0x03, 0xf0, 0x07, 0xe0, 0x0f, 0xf0, 0x07, 0xf0, 0x03, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00,  //  3  = ' ?? '
0x80, 0x00, 0xc0, 0x01, 0xe0, 0x03, 0xf0, 0x07, 0xe0, 0x03, 0xc0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  //  4  = ' ?? '
0xc0, 0x01, 0xc0, 0x01, 0xf0, 0x09, 0x38, 0x0e, 0x38, 0x0e, 0xf0, 0x09, 0xc0, 0x01, 0xc0, 0x01, 0x00, 0x00,  //  5  = ' ?? '
0xc0, 0x00, 0xe0, 0x01, 0xf0, 0x09, 0xf8, 0x0f, 0xf8, 0x0f, 0xf0, 0x09, 0xe0, 0x01, 0xc0, 0x00, 0x00, 0x00,  //  6  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0xc0, 0x03, 0xc0, 0x03, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  7  = ' ?? '
0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0x3f, 0xfc, 0x3f, 0xfc, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,  //  8  = ' ?? '
0x00, 0x00, 0xc0, 0x03, 0x60, 0x06, 0x20, 0x04, 0x20, 0x04, 0x60, 0x06, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00,  //  9  = ' ?? '
0xff, 0xff, 0x3f, 0xfc, 0x9f, 0xf9, 0xdf, 0xfb, 0xdf, 0xfb, 0x9f, 0xf9, 0x3f, 0xfc, 0xff, 0xff, 0x00, 0x00,  //  10  = ' ?? '
0x80, 0x07, 0xc0, 0x0f, 0x60, 0x08, 0x74, 0x08, 0xdc, 0x0f, 0x8c, 0x07, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,  //  11  = ' ?? '
0x00, 0x00, 0x78, 0x02, 0xfc, 0x02, 0x84, 0x0f, 0x84, 0x0f, 0xfc, 0x02, 0x78, 0x02, 0x00, 0x00, 0x00, 0x00,  //  12  = ' ?? '
0x00, 0x0c, 0x00, 0x0e, 0xfc, 0x0f, 0xfc, 0x07, 0x14, 0x00, 0x14, 0x00, 0x1c, 0x00, 0x1c, 0x00, 0x00, 0x00,  //  13  = ' ?? '
0x00, 0x1c, 0xfc, 0x1f, 0xfc, 0x0f, 0x14, 0x00, 0x14, 0x00, 0x14, 0x0e, 0xfc, 0x0f, 0xfc, 0x07, 0x00, 0x00,  //  14  = ' ?? '
0xa0, 0x02, 0xa0, 0x02, 0xc0, 0x01, 0x78, 0x0f, 0x78, 0x0f, 0xc0, 0x01, 0xa0, 0x02, 0xa0, 0x02, 0x00, 0x00,  //  15  = ' ?? '
0xfe, 0x0f, 0xfc, 0x07, 0xf8, 0x03, 0xf0, 0x01, 0xe0, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,  //  16  = ' ?? '
0x40, 0x00, 0x40, 0x00, 0xe0, 0x00, 0xf0, 0x01, 0xf8, 0x03, 0xfc, 0x07, 0xfe, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  17  = ' ?? '
0x00, 0x00, 0x10, 0x01, 0x18, 0x03, 0xfc, 0x07, 0xfc, 0x07, 0x18, 0x03, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00,  //  18  = ' ?? '
0x00, 0x00, 0xfc, 0x0d, 0xfc, 0x0d, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x0d, 0xfc, 0x0d, 0x00, 0x00, 0x00, 0x00,  //  19  = ' ?? '
0x38, 0x00, 0x7c, 0x00, 0x44, 0x00, 0xfc, 0x0f, 0xfc, 0x0f, 0x04, 0x00, 0xfc, 0x0f, 0xfc, 0x0f, 0x00, 0x00,  //  20  = ' ?? '
0xc4, 0x08, 0xee, 0x19, 0x3a, 0x13, 0x12, 0x12, 0x32, 0x17, 0xe6, 0x1d, 0xc4, 0x08, 0x00, 0x00, 0x00, 0x00,  //  21  = ' ?? '
0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  22  = ' ?? '
0x00, 0x00, 0x10, 0x09, 0x18, 0x0b, 0xfc, 0x0f, 0xfc, 0x0f, 0x18, 0x0b, 0x10, 0x09, 0x00, 0x00, 0x00, 0x00,  //  23  = ' ?? '
0x00, 0x00, 0x10, 0x00, 0x18, 0x00, 0xfc, 0x0f, 0xfc, 0x0f, 0x18, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  //  24  = ' ?? '
0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0xfc, 0x0f, 0xfc, 0x0f, 0x00, 0x06, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,  //  25  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xa0, 0x02, 0xe0, 0x03, 0xc0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  //  26  = ' ?? '
0x80, 0x00, 0xc0, 0x01, 0xe0, 0x03, 0xa0, 0x02, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  //  27  = ' ?? '
0xc0, 0x03, 0xc0, 0x03, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,  //  28  = ' ?? '
0x80, 0x00, 0xc0, 0x01, 0xe0, 0x03, 0x80, 0x00, 0x80, 0x00, 0xe0, 0x03, 0xc0, 0x01, 0x80, 0x00, 0x00, 0x00,  //  29  = ' ?? '
0x00, 0x06, 0x80, 0x07, 0xe0, 0x07, 0xf0, 0x07, 0xe0, 0x07, 0x80, 0x07, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  //  30  = ' ?? '
0x30, 0x00, 0xf0, 0x00, 0xf0, 0x03, 0xf0, 0x07, 0xf0, 0x03, 0xf0, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,  //  31  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  32  = '   '
0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0xfc, 0x0d, 0xfc, 0x0d, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  33  = ' ! '
0x00, 0x00, 0x0e, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00,  //  34  = ' " '
0x20, 0x02, 0xf8, 0x0f, 0xf8, 0x0f, 0x20, 0x02, 0xf8, 0x0f, 0xf8, 0x0f, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00,  //  35  = ' # '
0x38, 0x06, 0x7c, 0x0c, 0x44, 0x08, 0x47, 0x38, 0x47, 0x38, 0xcc, 0x0f, 0x98, 0x07, 0x00, 0x00, 0x00, 0x00,  //  36  = ' $ '
0x30, 0x0c, 0x30, 0x06, 0x00, 0x03, 0x80, 0x01, 0xc0, 0x00, 0x60, 0x0c, 0x30, 0x0c, 0x00, 0x00, 0x00, 0x00,  //  37  = ' % '
0x80, 0x07, 0xd8, 0x0f, 0x7c, 0x08, 0xe4, 0x08, 0xbc, 0x07, 0xd8, 0x0f, 0x40, 0x08, 0x00, 0x00, 0x00, 0x00,  //  38  = ' & '
0x00, 0x00, 0x10, 0x00, 0x1e, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  39  = ' ' '
0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0xf8, 0x07, 0x0c, 0x0c, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  40  = ' ( '
0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x0c, 0x0c, 0xf8, 0x07, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  41  = ' ) '
0x80, 0x00, 0xa0, 0x02, 0xe0, 0x03, 0xc0, 0x01, 0xc0, 0x01, 0xe0, 0x03, 0xa0, 0x02, 0x80, 0x00, 0x00, 0x00,  //  42  = ' * '
0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0xe0, 0x03, 0xe0, 0x03, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  //  43  = ' + '
0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1e, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  44  = ' , '
0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  //  45  = ' - '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  46  = ' . '
0x00, 0x0c, 0x00, 0x06, 0x00, 0x03, 0x80, 0x01, 0xc0, 0x00, 0x60, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,  //  47  = ' / '
0xf0, 0x03, 0xf8, 0x07, 0x0c, 0x0c, 0xc4, 0x08, 0xc4, 0x08, 0x0c, 0x0c, 0xf8, 0x07, 0xf0, 0x03, 0x00, 0x00,  //  48  = ' 0 '
0x00, 0x00, 0x10, 0x08, 0x18, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  49  = ' 1 '
0x08, 0x0e, 0x0c, 0x0f, 0x84, 0x09, 0xc4, 0x08, 0x64, 0x08, 0x3c, 0x0c, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,  //  50  = ' 2 '
0x08, 0x04, 0x0c, 0x0c, 0x44, 0x08, 0x44, 0x08, 0x44, 0x08, 0xfc, 0x0f, 0xb8, 0x07, 0x00, 0x00, 0x00, 0x00,  //  51  = ' 3 '
0xc0, 0x00, 0xe0, 0x00, 0xb0, 0x00, 0x98, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00,  //  52  = ' 4 '
0x7c, 0x04, 0x7c, 0x0c, 0x44, 0x08, 0x44, 0x08, 0x44, 0x08, 0xc4, 0x0f, 0x84, 0x07, 0x00, 0x00, 0x00, 0x00,  //  53  = ' 5 '
0xf0, 0x07, 0xf8, 0x0f, 0x4c, 0x08, 0x44, 0x08, 0x44, 0x08, 0xc0, 0x0f, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00,  //  54  = ' 6 '
0x0c, 0x00, 0x0c, 0x00, 0x04, 0x0f, 0x84, 0x0f, 0xc4, 0x00, 0x7c, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,  //  55  = ' 7 '
0xb8, 0x07, 0xfc, 0x0f, 0x44, 0x08, 0x44, 0x08, 0x44, 0x08, 0xfc, 0x0f, 0xb8, 0x07, 0x00, 0x00, 0x00, 0x00,  //  56  = ' 8 '
0x38, 0x00, 0x7c, 0x08, 0x44, 0x08, 0x44, 0x08, 0x44, 0x0c, 0xfc, 0x07, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00,  //  57  = ' 9 '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x06, 0x30, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  58  = ' : '
0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x30, 0x0e, 0x30, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  59  = ' ; '
0x00, 0x00, 0x80, 0x00, 0xc0, 0x01, 0x60, 0x03, 0x30, 0x06, 0x18, 0x0c, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00,  //  60  = ' < '
0x00, 0x00, 0x20, 0x01, 0x20, 0x01, 0x20, 0x01, 0x20, 0x01, 0x20, 0x01, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00,  //  61  = ' = '
0x00, 0x00, 0x08, 0x08, 0x18, 0x0c, 0x30, 0x06, 0x60, 0x03, 0xc0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  //  62  = ' > '
0x18, 0x00, 0x1c, 0x00, 0x04, 0x00, 0xc4, 0x0d, 0xe4, 0x0d, 0x3c, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,  //  63  = ' ? '
0xf0, 0x07, 0xf8, 0x0f, 0x08, 0x08, 0xc8, 0x0b, 0xc8, 0x0b, 0xf8, 0x0b, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00,  //  64  = ' @ '
0xe0, 0x0f, 0xf0, 0x0f, 0x98, 0x00, 0x8c, 0x00, 0x98, 0x00, 0xf0, 0x0f, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  65  = ' A '
0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x44, 0x08, 0x44, 0x08, 0xfc, 0x0f, 0xb8, 0x07, 0x00, 0x00, 0x00, 0x00,  //  66  = ' B '
0xf0, 0x03, 0xf8, 0x07, 0x0c, 0x0c, 0x04, 0x08, 0x04, 0x08, 0x0c, 0x0c, 0x18, 0x06, 0x00, 0x00, 0x00, 0x00,  //  67  = ' C '
0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x04, 0x08, 0x0c, 0x0c, 0xf8, 0x07, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00,  //  68  = ' D '
0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x44, 0x08, 0xe4, 0x08, 0x0c, 0x0c, 0x1c, 0x0e, 0x00, 0x00, 0x00, 0x00,  //  69  = ' E '
0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x44, 0x08, 0xe4, 0x00, 0x0c, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,  //  70  = ' F '
0xf0, 0x03, 0xf8, 0x07, 0x0c, 0x0c, 0x84, 0x08, 0x84, 0x08, 0x8c, 0x07, 0x98, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  71  = ' G '
0xfc, 0x0f, 0xfc, 0x0f, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0xfc, 0x0f, 0xfc, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  72  = ' H '
0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  73  = ' I '
0x00, 0x07, 0x00, 0x0f, 0x00, 0x08, 0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  //  74  = ' J '
0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0xc0, 0x00, 0xe0, 0x01, 0x3c, 0x0f, 0x1c, 0x0e, 0x00, 0x00, 0x00, 0x00,  //  75  = ' K '
0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x04, 0x08, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00,  //  76  = ' L '
0xfc, 0x0f, 0xfc, 0x0f, 0x38, 0x00, 0x70, 0x00, 0x70, 0x00, 0x38, 0x00, 0xfc, 0x0f, 0xfc, 0x0f, 0x00, 0x00,  //  77  = ' M '
0xfc, 0x0f, 0xfc, 0x0f, 0x38, 0x00, 0x70, 0x00, 0xe0, 0x00, 0xfc, 0x0f, 0xfc, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  78  = ' N '
0xf8, 0x07, 0xfc, 0x0f, 0x04, 0x08, 0x04, 0x08, 0x04, 0x08, 0xfc, 0x0f, 0xf8, 0x07, 0x00, 0x00, 0x00, 0x00,  //  79  = ' O '
0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x44, 0x08, 0x44, 0x00, 0x7c, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,  //  80  = ' P '
0xf8, 0x07, 0xfc, 0x0f, 0x04, 0x08, 0x04, 0x0e, 0x04, 0x3c, 0xfc, 0x3f, 0xf8, 0x27, 0x00, 0x00, 0x00, 0x00,  //  81  = ' Q '
0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x44, 0x00, 0xc4, 0x00, 0xfc, 0x0f, 0x38, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  82  = ' R '
0x18, 0x06, 0x3c, 0x0e, 0x64, 0x08, 0x44, 0x08, 0xc4, 0x08, 0x9c, 0x0f, 0x18, 0x07, 0x00, 0x00, 0x00, 0x00,  //  83  = ' S '
0x1c, 0x00, 0x0c, 0x00, 0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x04, 0x08, 0x0c, 0x00, 0x1c, 0x00, 0x00, 0x00,  //  84  = ' T '
0xfc, 0x07, 0xfc, 0x0f, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0xfc, 0x0f, 0xfc, 0x07, 0x00, 0x00, 0x00, 0x00,  //  85  = ' U '
0xfc, 0x01, 0xfc, 0x03, 0x00, 0x06, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x06, 0xfc, 0x03, 0xfc, 0x01, 0x00, 0x00,  //  86  = ' V '
0xfc, 0x03, 0xfc, 0x0f, 0x00, 0x0e, 0x80, 0x03, 0x80, 0x03, 0x00, 0x0e, 0xfc, 0x0f, 0xfc, 0x03, 0x00, 0x00,  //  87  = ' W '
0x0c, 0x0c, 0x1c, 0x0e, 0x30, 0x03, 0xe0, 0x01, 0xe0, 0x01, 0x30, 0x03, 0x1c, 0x0e, 0x0c, 0x0c, 0x00, 0x00,  //  88  = ' X '
0x1c, 0x00, 0x3c, 0x00, 0x60, 0x08, 0xc0, 0x0f, 0xc0, 0x0f, 0x60, 0x08, 0x3c, 0x00, 0x1c, 0x00, 0x00, 0x00,  //  89  = ' Y '
0x1c, 0x0e, 0x0c, 0x0f, 0x84, 0x09, 0xc4, 0x08, 0x64, 0x08, 0x34, 0x08, 0x1c, 0x0c, 0x0c, 0x0e, 0x00, 0x00,  //  90  = ' Z '
0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0xfc, 0x0f, 0x04, 0x08, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  91  = ' [ '
0x38, 0x00, 0x70, 0x00, 0xe0, 0x00, 0xc0, 0x01, 0x80, 0x03, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00,  //  92  = ' \ '
0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  93  = ' ] '
0x08, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x03, 0x00, 0x06, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  //  94  = ' ^ '
0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00,  //  95  = ' _ '
0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  96  = ' ` '
0x00, 0x07, 0xa0, 0x0f, 0xa0, 0x08, 0xa0, 0x08, 0xe0, 0x07, 0xc0, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  97  = ' a '
0x04, 0x00, 0xfc, 0x0f, 0xfc, 0x0f, 0x20, 0x08, 0x60, 0x08, 0xc0, 0x0f, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00,  //  98  = ' b '
0xc0, 0x07, 0xe0, 0x0f, 0x20, 0x08, 0x20, 0x08, 0x20, 0x08, 0x60, 0x0c, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00,  //  99  = ' c '
0x80, 0x07, 0xc0, 0x0f, 0x60, 0x08, 0x24, 0x08, 0xfc, 0x07, 0xfc, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  100  = ' d '
0xc0, 0x07, 0xe0, 0x0f, 0xa0, 0x08, 0xa0, 0x08, 0xa0, 0x08, 0xe0, 0x0c, 0xc0, 0x04, 0x00, 0x00, 0x00, 0x00,  //  101  = ' e '
0x40, 0x08, 0xf8, 0x0f, 0xfc, 0x0f, 0x44, 0x08, 0x0c, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  102  = ' f '
0xc0, 0x27, 0xe0, 0x6f, 0x20, 0x48, 0x20, 0x48, 0xc0, 0x7f, 0xe0, 0x3f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,  //  103  = ' g '
0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x40, 0x00, 0x20, 0x00, 0xe0, 0x0f, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  104  = ' h '
0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0xec, 0x0f, 0xec, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  105  = ' i '
0x00, 0x00, 0x00, 0x30, 0x00, 0x70, 0x00, 0x40, 0x20, 0x40, 0xec, 0x7f, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00,  //  106  = ' j '
0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x80, 0x01, 0xc0, 0x03, 0x60, 0x0e, 0x20, 0x0c, 0x00, 0x00, 0x00, 0x00,  //  107  = ' k '
0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0xfc, 0x0f, 0xfc, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  108  = ' l '
0xe0, 0x0f, 0xe0, 0x0f, 0x60, 0x00, 0xc0, 0x0f, 0xc0, 0x0f, 0x60, 0x00, 0xe0, 0x0f, 0xc0, 0x0f, 0x00, 0x00,  //  109  = ' m '
0x20, 0x00, 0xe0, 0x0f, 0xc0, 0x0f, 0x20, 0x00, 0x20, 0x00, 0xe0, 0x0f, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  110  = ' n '
0xc0, 0x07, 0xe0, 0x0f, 0x20, 0x08, 0x20, 0x08, 0x20, 0x08, 0xe0, 0x0f, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00,  //  111  = ' o '
0x20, 0x40, 0xe0, 0x7f, 0xc0, 0x7f, 0x20, 0x48, 0x20, 0x08, 0xe0, 0x0f, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00,  //  112  = ' p '
0xc0, 0x07, 0xe0, 0x0f, 0x20, 0x08, 0x20, 0x48, 0xc0, 0x7f, 0xe0, 0x7f, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00,  //  113  = ' q '
0x20, 0x08, 0xe0, 0x0f, 0xc0, 0x0f, 0x60, 0x08, 0x20, 0x00, 0xe0, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,  //  114  = ' r '
0x40, 0x04, 0xe0, 0x0c, 0xa0, 0x09, 0x20, 0x09, 0x20, 0x0b, 0x60, 0x0e, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00,  //  115  = ' s '
0x20, 0x00, 0x20, 0x00, 0xf8, 0x07, 0xfc, 0x0f, 0x20, 0x08, 0x20, 0x0c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  //  116  = ' t '
0xe0, 0x07, 0xe0, 0x0f, 0x00, 0x08, 0x00, 0x08, 0xe0, 0x07, 0xe0, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  117  = ' u '
0xe0, 0x01, 0xe0, 0x03, 0x00, 0x06, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x06, 0xe0, 0x03, 0xe0, 0x01, 0x00, 0x00,  //  118  = ' v '
0xe0, 0x07, 0xe0, 0x0f, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x0c, 0xe0, 0x0f, 0xe0, 0x07, 0x00, 0x00,  //  119  = ' w '
0x20, 0x08, 0x60, 0x0c, 0xc0, 0x06, 0x80, 0x03, 0x80, 0x03, 0xc0, 0x06, 0x60, 0x0c, 0x20, 0x08, 0x00, 0x00,  //  120  = ' x '
0xe0, 0x47, 0xe0, 0x4f, 0x00, 0x48, 0x00, 0x48, 0x00, 0x68, 0xe0, 0x3f, 0xe0, 0x1f, 0x00, 0x00, 0x00, 0x00,  //  121  = ' y '
0x60, 0x0c, 0x60, 0x0e, 0x20, 0x0b, 0xa0, 0x09, 0xe0, 0x08, 0x60, 0x0c, 0x20, 0x0c, 0x00, 0x00, 0x00, 0x00,  //  122  = ' z '
0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0xf8, 0x07, 0xbc, 0x0f, 0x04, 0x08, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00,  //  123  = ' { '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x0f, 0xbc, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  124  = ' | '
0x00, 0x00, 0x04, 0x08, 0x04, 0x08, 0xbc, 0x0f, 0xf8, 0x07, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,  //  125  = ' } '
0x08, 0x00, 0x0c, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  //  126  = ' ~ '
0x80, 0x07, 0xc0, 0x07, 0x60, 0x04, 0x30, 0x04, 0x60, 0x04, 0xc0, 0x07, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00,  //  127  = '  '
0xf0, 0x01, 0xf8, 0x23, 0x0c, 0x26, 0x04, 0x24, 0x04, 0x2c, 0x0c, 0x3e, 0x18, 0x13, 0x00, 0x00, 0x00, 0x00,  //  128  = ' ?? '
0xe4, 0x07, 0xe4, 0x0f, 0x00, 0x08, 0x00, 0x08, 0xe4, 0x07, 0xe4, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  129  = ' ?? '
0xc0, 0x07, 0xe0, 0x0f, 0xa8, 0x08, 0xac, 0x08, 0xa6, 0x08, 0xe2, 0x0c, 0xc0, 0x04, 0x00, 0x00, 0x00, 0x00,  //  130  = ' ?? '
0x00, 0x07, 0xa8, 0x0f, 0xac, 0x08, 0xa6, 0x08, 0xec, 0x07, 0xc8, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  131  = ' ?? '
0x04, 0x07, 0xa4, 0x0f, 0xa0, 0x08, 0xa0, 0x08, 0xe4, 0x07, 0xc4, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  132  = ' ?? '
0x00, 0x07, 0xa2, 0x0f, 0xa6, 0x08, 0xac, 0x08, 0xe8, 0x07, 0xc0, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  133  = ' ?? '
0x00, 0x07, 0xa4, 0x0f, 0xae, 0x08, 0xaa, 0x08, 0xee, 0x07, 0xc4, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  134  = ' ?? '
0x00, 0x00, 0xe0, 0x01, 0xf0, 0x13, 0x10, 0x12, 0x10, 0x16, 0x30, 0x1f, 0x20, 0x09, 0x00, 0x00, 0x00, 0x00,  //  135  = ' ?? '
0xc0, 0x07, 0xe8, 0x0f, 0xac, 0x08, 0xa6, 0x08, 0xac, 0x08, 0xe8, 0x0c, 0xc0, 0x04, 0x00, 0x00, 0x00, 0x00,  //  136  = ' ?? '
0xc4, 0x07, 0xe4, 0x0f, 0xa0, 0x08, 0xa0, 0x08, 0xa0, 0x08, 0xe4, 0x0c, 0xc4, 0x04, 0x00, 0x00, 0x00, 0x00,  //  137  = ' ?? '
0xc0, 0x07, 0xe2, 0x0f, 0xa6, 0x08, 0xac, 0x08, 0xa8, 0x08, 0xe0, 0x0c, 0xc0, 0x04, 0x00, 0x00, 0x00, 0x00,  //  138  = ' ?? '
0x00, 0x00, 0x04, 0x00, 0x24, 0x08, 0xe0, 0x0f, 0xe0, 0x0f, 0x04, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  //  139  = ' ?? '
0x00, 0x00, 0x08, 0x00, 0x2c, 0x08, 0xe6, 0x0f, 0xe6, 0x0f, 0x0c, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  //  140  = ' ?? '
0x00, 0x00, 0x02, 0x00, 0x26, 0x08, 0xec, 0x0f, 0xe8, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  141  = ' ?? '
0xc2, 0x0f, 0xe2, 0x0f, 0x30, 0x01, 0x18, 0x01, 0x30, 0x01, 0xe2, 0x0f, 0xc2, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  142  = ' ?? '
0xc0, 0x0f, 0xe2, 0x0f, 0x37, 0x01, 0x15, 0x01, 0x37, 0x01, 0xe2, 0x0f, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  143  = ' ?? '
0x10, 0x08, 0xf4, 0x0f, 0xf6, 0x0f, 0x93, 0x08, 0x91, 0x08, 0xb0, 0x0c, 0x30, 0x0c, 0x00, 0x00, 0x00, 0x00,  //  144  = ' ?? '
0x00, 0x06, 0x20, 0x0f, 0x60, 0x09, 0xc0, 0x0f, 0xe0, 0x07, 0x20, 0x0d, 0xe0, 0x09, 0xc0, 0x08, 0x00, 0x00,  //  145  = ' ?? '
0xf0, 0x0f, 0xf8, 0x0f, 0x4c, 0x00, 0x44, 0x00, 0xfc, 0x0f, 0xfc, 0x0f, 0x44, 0x08, 0x00, 0x00, 0x00, 0x00,  //  146  = ' ?? '
0xc0, 0x07, 0xe8, 0x0f, 0x2c, 0x08, 0x26, 0x08, 0x2c, 0x08, 0xe8, 0x0f, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00,  //  147  = ' ?? '
0xc4, 0x07, 0xe4, 0x0f, 0x20, 0x08, 0x20, 0x08, 0x20, 0x08, 0xe4, 0x0f, 0xc4, 0x07, 0x00, 0x00, 0x00, 0x00,  //  148  = ' ?? '
0xc0, 0x07, 0xe2, 0x0f, 0x26, 0x08, 0x2c, 0x08, 0x28, 0x08, 0xe0, 0x0f, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00,  //  149  = ' ?? '
0xe8, 0x07, 0xec, 0x0f, 0x06, 0x08, 0x06, 0x08, 0xec, 0x07, 0xe8, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  150  = ' ?? '
0xe0, 0x07, 0xe2, 0x0f, 0x06, 0x08, 0x0c, 0x08, 0xe8, 0x07, 0xe0, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  151  = ' ?? '
0xe4, 0x07, 0xe4, 0x4f, 0x00, 0x48, 0x00, 0x48, 0x00, 0x68, 0xe4, 0x3f, 0xe4, 0x1f, 0x00, 0x00, 0x00, 0x00,  //  152  = ' ?? '
0xf2, 0x07, 0xfa, 0x0f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xfa, 0x0f, 0xf2, 0x07, 0x00, 0x00, 0x00, 0x00,  //  153  = ' ?? '
0xfa, 0x07, 0xfa, 0x0f, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0xfa, 0x0f, 0xfa, 0x07, 0x00, 0x00, 0x00, 0x00,  //  154  = ' ?? '
0xf0, 0x01, 0xf8, 0x03, 0x08, 0x02, 0x0e, 0x0e, 0x0e, 0x0e, 0x08, 0x02, 0x18, 0x03, 0x10, 0x01, 0x00, 0x00,  //  155  = ' ?? '
0x20, 0x0c, 0xfc, 0x0f, 0xfe, 0x0f, 0x22, 0x08, 0x06, 0x08, 0x0c, 0x0c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  //  156  = ' ?? '
0x44, 0x01, 0x4c, 0x01, 0x58, 0x01, 0xf0, 0x0f, 0xf0, 0x0f, 0x58, 0x01, 0x4c, 0x01, 0x44, 0x01, 0x00, 0x00,  //  157  = ' ?? '
0x02, 0x08, 0xfe, 0x0f, 0xfe, 0x0f, 0x12, 0x08, 0x92, 0x00, 0xde, 0x07, 0xec, 0x0f, 0x80, 0x08, 0x00, 0x00,  //  158  = ' ?? '
0x00, 0x10, 0x40, 0x30, 0x40, 0x20, 0xfc, 0x3f, 0xfe, 0x1f, 0x42, 0x00, 0x46, 0x00, 0x04, 0x00, 0x00, 0x00,  //  159  = ' ?? '
0x00, 0x07, 0xa8, 0x0f, 0xac, 0x08, 0xa6, 0x08, 0xe2, 0x07, 0xc0, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  160  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x28, 0x08, 0xec, 0x0f, 0xe6, 0x0f, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  161  = ' ?? '
0xc0, 0x07, 0xe8, 0x0f, 0x2c, 0x08, 0x26, 0x08, 0x22, 0x08, 0xe0, 0x0f, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00,  //  162  = ' ?? '
0xe0, 0x07, 0xe8, 0x0f, 0x0c, 0x08, 0x06, 0x08, 0xe2, 0x07, 0xe0, 0x0f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  163  = ' ?? '
0x28, 0x00, 0xec, 0x0f, 0xc4, 0x0f, 0x2c, 0x00, 0x28, 0x00, 0xec, 0x0f, 0xc4, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  164  = ' ?? '
0xfa, 0x0f, 0xfb, 0x0f, 0x71, 0x00, 0xe3, 0x00, 0xc2, 0x01, 0xfb, 0x0f, 0xf9, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  165  = ' ?? '
0x00, 0x00, 0x4c, 0x00, 0x5e, 0x00, 0x52, 0x00, 0x5e, 0x00, 0x5e, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,  //  166  = ' ?? '
0x00, 0x00, 0x4c, 0x00, 0x5e, 0x00, 0x52, 0x00, 0x5e, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  167  = ' ?? '
0x00, 0x07, 0x80, 0x0f, 0xec, 0x08, 0x6c, 0x08, 0x00, 0x08, 0x00, 0x0e, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  //  168  = ' ?? '
0xc0, 0x07, 0xc0, 0x07, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,  //  169  = ' ?? '
0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0xc0, 0x07, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00,  //  170  = ' ?? '
0x3e, 0x06, 0x3e, 0x03, 0x80, 0x01, 0xc0, 0x24, 0x60, 0x36, 0x30, 0x3a, 0x18, 0x2e, 0x00, 0x24, 0x00, 0x00,  //  171  = ' ?? '
0x3e, 0x06, 0x3e, 0x03, 0x80, 0x09, 0xc0, 0x0c, 0x60, 0x0a, 0x30, 0x3f, 0x18, 0x3f, 0x00, 0x00, 0x00, 0x00,  //  172  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xec, 0x0f, 0xec, 0x0f, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  173  = ' ?? '
0x80, 0x00, 0xc0, 0x01, 0x60, 0x03, 0xa0, 0x02, 0xc0, 0x01, 0x60, 0x03, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00,  //  174  = ' ?? '
0x20, 0x02, 0x60, 0x03, 0xc0, 0x01, 0xa0, 0x02, 0x60, 0x03, 0xc0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  //  175  = ' ?? '
0x00, 0x00, 0xaa, 0xaa, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0xaa, 0xaa, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55,  //  176  = ' ?? '
0xaa, 0xaa, 0x55, 0x55, 0xaa, 0xaa, 0x55, 0x55, 0xaa, 0xaa, 0x55, 0x55, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x55,  //  177  = ' ?? '
0x55, 0x55, 0xff, 0xff, 0xaa, 0xaa, 0xff, 0xff, 0x55, 0x55, 0xff, 0xff, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff,  //  178  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  179  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  180  = ' ?? '
0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  181  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,  //  182  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0x80, 0xff, 0x80, 0xff, 0x80, 0x00, 0x80, 0xff, 0x80, 0xff, 0x00, 0x00, 0x00, 0x00,  //  183  = ' ?? '
0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xe0, 0xff, 0xe0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  184  = ' ?? '
0xa0, 0x00, 0xa0, 0x00, 0xbf, 0xff, 0xbf, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,  //  185  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,  //  186  = ' ?? '
0xa0, 0x00, 0xa0, 0x00, 0xa0, 0xff, 0xa0, 0xff, 0x20, 0x00, 0xe0, 0xff, 0xe0, 0xff, 0x00, 0x00, 0x00, 0x00,  //  187  = ' ?? '
0xa0, 0x00, 0xa0, 0x00, 0xbf, 0x00, 0xbf, 0x00, 0x80, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,  //  188  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0xff, 0x00, 0xff, 0x00, 0x80, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,  //  189  = ' ?? '
0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  190  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xff, 0x80, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  191  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,  //  192  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xff, 0x00, 0xff, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,  //  193  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xff, 0x80, 0xff, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,  //  194  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,  //  195  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,  //  196  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,  //  197  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00,  //  198  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x80, 0x00,  //  199  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x80, 0x00, 0xbf, 0x00, 0xbf, 0x00, 0xa0, 0x00, 0xa0, 0x00,  //  200  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xe0, 0xff, 0x20, 0x00, 0xa0, 0xff, 0xa0, 0xff, 0xa0, 0x00, 0xa0, 0x00,  //  201  = ' ?? '
0xa0, 0x00, 0xa0, 0x00, 0xbf, 0x00, 0xbf, 0x00, 0x80, 0x00, 0xbf, 0x00, 0xbf, 0x00, 0xa0, 0x00, 0xa0, 0x00,  //  202  = ' ?? '
0xa0, 0x00, 0xa0, 0x00, 0xa0, 0xff, 0xa0, 0xff, 0x20, 0x00, 0xa0, 0xff, 0xa0, 0xff, 0xa0, 0x00, 0xa0, 0x00,  //  203  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xbf, 0xff, 0xbf, 0xff, 0xa0, 0x00, 0xa0, 0x00,  //  204  = ' ?? '
0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00,  //  205  = ' ?? '
0xa0, 0x00, 0xa0, 0x00, 0xbf, 0xff, 0xbf, 0xff, 0x00, 0x00, 0xbf, 0xff, 0xbf, 0xff, 0xa0, 0x00, 0xa0, 0x00,  //  206  = ' ?? '
0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xbf, 0x00, 0xbf, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00,  //  207  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0xff, 0x00, 0xff, 0x00, 0x80, 0x00, 0xff, 0x00, 0xff, 0x00, 0x80, 0x00, 0x80, 0x00,  //  208  = ' ?? '
0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0xff, 0xa0, 0xff, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00,  //  209  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0x80, 0xff, 0x80, 0xff, 0x80, 0x00, 0x80, 0xff, 0x80, 0xff, 0x80, 0x00, 0x80, 0x00,  //  210  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x80, 0x00, 0xff, 0x00, 0xff, 0x00, 0x80, 0x00, 0x80, 0x00,  //  211  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00,  //  212  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xe0, 0xff, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00,  //  213  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 0xff, 0x80, 0x00, 0x80, 0xff, 0x80, 0xff, 0x80, 0x00, 0x80, 0x00,  //  214  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x80, 0x00,  //  215  = ' ?? '
0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00,  //  216  = ' ?? '
0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  217  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x80, 0xff, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00,  //  218  = ' ?? '
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //  219  = ' ?? '
0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff,  //  220  = ' ?? '
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  221  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //  222  = ' ?? '
0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00,  //  223  = ' ?? '
0xc0, 0x07, 0xe0, 0x0f, 0x20, 0x08, 0xe0, 0x0f, 0xc0, 0x07, 0x60, 0x0c, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00,  //  224  = ' ?? '
0xf8, 0x0f, 0xfc, 0x0f, 0x04, 0x00, 0x44, 0x00, 0xfc, 0x08, 0xb8, 0x0f, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,  //  225  = ' ?? '
0xfc, 0x0f, 0xfc, 0x0f, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x1c, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,  //  226  = ' ?? '
0x10, 0x00, 0xf0, 0x0f, 0xf0, 0x0f, 0x10, 0x00, 0xf0, 0x0f, 0xf0, 0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  //  227  = ' ?? '
0x18, 0x0c, 0x38, 0x0e, 0x68, 0x0b, 0xc8, 0x09, 0x88, 0x08, 0x18, 0x0c, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,  //  228  = ' ?? '
0xc0, 0x07, 0xe0, 0x0f, 0x20, 0x08, 0xe0, 0x0f, 0xe0, 0x07, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,  //  229  = ' ?? '
0x00, 0x10, 0xf0, 0x1f, 0xf0, 0x0f, 0x00, 0x02, 0x00, 0x02, 0xf0, 0x03, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00,  //  230  = ' ?? '
0x20, 0x00, 0x30, 0x00, 0x10, 0x00, 0xf0, 0x0f, 0xe0, 0x0f, 0x30, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  //  231  = ' ?? '
0x00, 0x00, 0xc8, 0x09, 0xe8, 0x0b, 0x38, 0x0e, 0x38, 0x0e, 0xe8, 0x0b, 0xc8, 0x09, 0x00, 0x00, 0x00, 0x00,  //  232  = ' ?? '
0xe0, 0x03, 0xf0, 0x07, 0x98, 0x0c, 0x88, 0x08, 0x98, 0x0c, 0xf0, 0x07, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x00,  //  233  = ' ?? '
0x70, 0x08, 0xf8, 0x0f, 0x8c, 0x0f, 0x04, 0x00, 0x8c, 0x0f, 0xf8, 0x0f, 0x70, 0x08, 0x00, 0x00, 0x00, 0x00,  //  234  = ' ?? '
0x00, 0x00, 0x80, 0x07, 0xc8, 0x0f, 0x5c, 0x08, 0x74, 0x08, 0xe4, 0x0f, 0xc4, 0x07, 0x00, 0x00, 0x00, 0x00,  //  235  = ' ?? '
0xc0, 0x01, 0xe0, 0x03, 0x20, 0x02, 0xe0, 0x03, 0xe0, 0x03, 0x20, 0x02, 0xe0, 0x03, 0xc0, 0x01, 0x00, 0x00,  //  236  = ' ?? '
0xc0, 0x09, 0xe0, 0x0f, 0x20, 0x07, 0xe0, 0x03, 0xe0, 0x02, 0x30, 0x02, 0xf8, 0x03, 0xc8, 0x01, 0x00, 0x00,  //  237  = ' ?? '
0x00, 0x00, 0xf0, 0x03, 0xf8, 0x07, 0x4c, 0x0c, 0x44, 0x08, 0x44, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  238  = ' ?? '
0xf0, 0x0f, 0xf8, 0x0f, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0xf8, 0x0f, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00,  //  239  = ' ?? '
0x90, 0x04, 0x90, 0x04, 0x90, 0x04, 0x90, 0x04, 0x90, 0x04, 0x90, 0x04, 0x90, 0x04, 0x00, 0x00, 0x00, 0x00,  //  240  = ' ?? '
0x00, 0x08, 0x40, 0x08, 0x40, 0x08, 0xf0, 0x09, 0xf0, 0x09, 0x40, 0x08, 0x40, 0x08, 0x00, 0x08, 0x00, 0x00,  //  241  = ' ?? '
0x00, 0x00, 0x00, 0x08, 0x08, 0x0a, 0x18, 0x0b, 0xb0, 0x09, 0xe0, 0x08, 0x40, 0x08, 0x00, 0x00, 0x00, 0x00,  //  242  = ' ?? '
0x00, 0x00, 0x40, 0x08, 0xe0, 0x08, 0xb0, 0x09, 0x18, 0x0b, 0x08, 0x0a, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  //  243  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xfc, 0xff, 0x04, 0x00, 0x1c, 0x00, 0x18, 0x00, 0x00, 0x00,  //  244  = ' ?? '
0x00, 0x07, 0x00, 0x0f, 0x00, 0x08, 0xff, 0x0f, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  245  = ' ?? '
0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0xb0, 0x06, 0xb0, 0x06, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  //  246  = ' ?? '
0x40, 0x02, 0x60, 0x03, 0x20, 0x01, 0x60, 0x03, 0x40, 0x02, 0x60, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00,  //  247  = ' ?? '
0x00, 0x00, 0x0c, 0x00, 0x1e, 0x00, 0x12, 0x00, 0x1e, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  248  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  249  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  250  = ' ?? '
0x80, 0x00, 0x80, 0x03, 0x80, 0x07, 0x00, 0x0c, 0xfe, 0x0f, 0xfe, 0x0f, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,  //  251  = ' ?? '
0x02, 0x00, 0x7e, 0x00, 0x7c, 0x00, 0x02, 0x00, 0x7e, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  252  = ' ?? '
0x64, 0x00, 0x76, 0x00, 0x5a, 0x00, 0x4e, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  253  = ' ?? '
0x00, 0x00, 0xf0, 0x07, 0xf0, 0x07, 0xf0, 0x07, 0xf0, 0x07, 0xf0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  254  = ' ?? '
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  255  = ' ?? '

};


        #endregion

        #region Font Descriptions

        // font description
        struct FontDescExt
        {
            public FontDescExt(int w, int h, int asc, int dsc, int colors, string name,
                byte[]? spac, short[]? off, byte[] dat, byte[]? pal)
            {
                Width = w;
                Height = h;
                Ascender = asc;
                Descender = dsc;
                this.Colors = colors;
                this.Name = name;
                Spacing = spac;
                Offsets = off;
                Data = dat;
                Palette = pal;
            }

            public readonly int Width; // basic size
            public readonly int Height; // basic size
            public readonly int Ascender; // extra for special characters
            public readonly int Descender; // extra for special characters
            public readonly int Colors; // number of colors used
            public readonly string Name; // the names
            public readonly byte[]? Spacing; // monospaced if 0, else spacing data
            public readonly short[]? Offsets; // offset to start of char data, per char, 0 if none
            public readonly byte[] Data; // image data
            public readonly byte[]? Palette; // palette, or null if none
        }


        // todo - make static, use reflection?

        static readonly FontDescExt Font3X3Mono = new(
            3, 3, // font size
            0, 1, // ascender, descender
            2, // colors
            "3x3 Monospaced", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font3X3MonoData, // image data
            null // palette
        );

        static readonly FontDescExt Font3X4Mono = new(
            3, 4, // font size
            0, 1, // ascender, descender
            2, // colors
            "3x4 Monospaced", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font3X4MonoData, // image data
            null // palette
        );

        static readonly FontDescExt Font3X5Mono = new(
            3, 5, // font size
            0, 0, // ascender, descender
            2, // colors
            "3x5 Monospaced", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font3X5MonoData, // image data
            null // palette
        );

        static readonly FontDescExt Font3X5Mono2 = new(
            3, 5, // font size
            0, 1, // ascender, descender
            2, // colors
            "3x5 Monospaced 2", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font3X5MonoData2, // image data
            null // palette
        );

        static readonly FontDescExt Font4X4Mono = new(
            4, 4, // font size
            0, 0, // ascender, descender
            2, // colors
            "4x4 Monospaced", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font4X4MonoData, // image data
            null // palette
        );

        static readonly FontDescExt Font4X4Mono2 = new(
            4, 4, // font size
            0, 1, // ascender, descender
            2, // colors
            "4x4 Monospaced 2", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font4X4MonoData2, // image data
            null // palette
        );

        static readonly FontDescExt Font5X5Mono = new(
            5, 5, // font size
            0, 0, // ascender, descender
            2, // colors
            "5x5 Monospaced", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font5X5MonoData, // image data
            null // palette
        );

        static readonly FontDescExt Font5X7Mono = new(
            5, 7, // font size
            1, 2, // ascender, descender
            2, // colors
            "5x7 Monospaced", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font5X7MonoData, // image data
            null // palette
        );

        static readonly FontDescExt Font5X8NMono = new(
            5, 8, // font size
            0, 0, // ascender, descender
            2, // colors
            "5x8 Narrow Monospaced", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font5X8NMonoData, // image data
            null // palette
        );

        static readonly FontDescExt Font5X8N = new(
            5, 8, // font size
            0, 0, // ascender, descender
            2, // colors
            "5x8 Narrow", // name
            Font5X8NWidths, // not monospaced
            Font5X8NOffsets, // data offsets, per char
            Font5X8NData, // image data
            null // palette
        );

        static readonly FontDescExt Font5X8Mono = new(
            5, 8, // font size
            0, 0, // ascender, descender
            2, // colors
            "5x8 Monospaced", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font5X8MonoData, // image data
            null // palette
        );

        static readonly FontDescExt Font5X8 = new(
            5, 8, // font size
            0, 0, // ascender, descender
            2, // colors
            "5x8", // name
            Font5X8Widths, // not monospaced
            Font5X8Offsets, // data offsets, per char
            Font5X8Data, // image data
            null // palette
        );

        static readonly FontDescExt Font7X7Mono = new(
            7, 7, // font size
            1, 2, // ascender, descender
            2, // colors
            "7x7 Monospaced", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font7X7MonoData, // image data
            null // palette
        );

        static readonly FontDescExt Font8X11Mono = new(
            8, 11, // font size
            0, 2, // ascender, descender
            2, // colors
            "8x11 Monospaced", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font8X11MonoData, // image data
            null // palette
        );

        static readonly FontDescExt Font10X13Mono = new(
            10, 13, // font size
            2, 2, // ascender, descender
            2, // colors
            "10x13 Monospaced", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font10X13MonoData, // image data
            null // palette
        );

        static readonly FontDescExt Font4X4 = new(
            4, 4, // font size
            0, 0, // ascender, descender
            2, // colors
            "4x4 Monospaced X", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font4x4Data, // image data
            null // palette
        );
        static readonly FontDescExt Font4X6A = new(
            4, 6, // font size
            0, 0, // ascender, descender
            2, // colors
            "4x6 Monospaced A", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font4x6AData, // image data
            null // palette
        );
        static readonly FontDescExt Font4X6B = new(
            4, 4, // font size
            0, 0, // ascender, descender
            2, // colors
            "4x6 Monospaced B", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font4x6BData, // image data
            null // palette
        );

        static readonly FontDescExt Font5X7 = new(
            5, 7, // font size
            0, 0, // ascender, descender
            2, // colors
            "5x7 Monospaced", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font5X7Data, // image data
            null // palette
        );
        static readonly FontDescExt Font9X16 = new(
            9, 16, // font size
            0, 0, // ascender, descender
            2, // colors
            "9x16 Monospaced", // name
            null, // monospaced
            null, // offsets (monospaced)
            Font9x16Data, // image data
            null // palette
        );

        // list of installed fonts - todo - get via reflection
        static readonly FontDescExt[] InstalledFonts = {
            Font3X3Mono,
            Font3X4Mono,
            Font3X5Mono,
            Font3X5Mono2,
            Font4X4Mono,
            Font4X4Mono2,
            Font5X5Mono,
            Font5X7Mono,
            Font5X8NMono,
            Font5X8N,
            Font5X8Mono,
            Font5X8,
            Font7X7Mono,
            Font8X11Mono,
            Font10X13Mono,

            // todo - some of these buggy - 
            Font4X4, Font4X6A, Font4X6B,
            Font5X7, Font9X16

        };
        #endregion
    }
}

