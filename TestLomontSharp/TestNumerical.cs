using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO.Pipes;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Lomont.Numerical;
using NUnit.Framework;
using NUnit.Framework.Legacy;
using static Lomont.Numerical.Utility;

namespace TestLomontSharp
{
    public class TestNumerical
    {
        [Test]
        public void TestFactorial()
        {
            long[] ans = new long[]
            {
                1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 
                479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 
                355687428096000, 6402373705728000, 121645100408832000, 
                2432902008176640000
            };
            for (var n = 0; n <=20; ++n)
                ClassicAssert.AreEqual(ans[n],Factorial(n));
        }

        [Test]
        public void TestMultinomial()
        {
            // 0-8 in 3 dimensions
            long[] ans = new[]
            {
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 3, 6, 10,
                15, 21, 28, 36, 45, 1, 4, 10, 20, 35, 56, 84, 120, 165, 1, 5, 15, 35,
                70, 126, 210, 330, 495, 1, 6, 21, 56, 126, 252, 462, 792, 1287, 1, 7,
                28, 84, 210, 462, 924, 1716, 3003, 1, 8, 36, 120, 330, 792, 1716,
                3432, 6435, 1, 9, 45, 165, 495, 1287, 3003, 6435, 12870, 1, 2, 3, 4,
                5, 6, 7, 8, 9, 2, 6, 12, 20, 30, 42, 56, 72, 90, 3, 12, 30, 60, 105,
                168, 252, 360, 495, 4, 20, 60, 140, 280, 504, 840, 1320, 1980, 5, 30,
                105, 280, 630, 1260, 2310, 3960, 6435, 6, 42, 168, 504, 1260, 2772,
                5544, 10296, 18018, 7, 56, 252, 840, 2310, 5544, 12012, 24024, 45045,
                8, 72, 360, 1320, 3960, 10296, 24024, 51480, 102960, 9, 90, 495,
                1980, 6435, 18018, 45045, 102960, 218790, 1, 3, 6, 10, 15, 21, 28,
                36, 45, 3, 12, 30, 60, 105, 168, 252, 360, 495, 6, 30, 90, 210, 420,
                756, 1260, 1980, 2970, 10, 60, 210, 560, 1260, 2520, 4620, 7920,
                12870, 15, 105, 420, 1260, 3150, 6930, 13860, 25740, 45045, 21, 168,
                756, 2520, 6930, 16632, 36036, 72072, 135135, 28, 252, 1260, 4620,
                13860, 36036, 84084, 180180, 360360, 36, 360, 1980, 7920, 25740,
                72072, 180180, 411840, 875160, 45, 495, 2970, 12870, 45045, 135135,
                360360, 875160, 1969110, 1, 4, 10, 20, 35, 56, 84, 120, 165, 4, 20,
                60, 140, 280, 504, 840, 1320, 1980, 10, 60, 210, 560, 1260, 2520,
                4620, 7920, 12870, 20, 140, 560, 1680, 4200, 9240, 18480, 34320,
                60060, 35, 280, 1260, 4200, 11550, 27720, 60060, 120120, 225225, 56,
                504, 2520, 9240, 27720, 72072, 168168, 360360, 720720, 84, 840, 4620,
                18480, 60060, 168168, 420420, 960960, 2042040, 120, 1320, 7920,
                34320, 120120, 360360, 960960, 2333760, 5250960, 165, 1980, 12870,
                60060, 225225, 720720, 2042040, 5250960, 12471030, 1, 5, 15, 35, 70,
                126, 210, 330, 495, 5, 30, 105, 280, 630, 1260, 2310, 3960, 6435, 15,
                105, 420, 1260, 3150, 6930, 13860, 25740, 45045, 35, 280, 1260, 4200,
                11550, 27720, 60060, 120120, 225225, 70, 630, 3150, 11550, 34650,
                90090, 210210, 450450, 900900, 126, 1260, 6930, 27720, 90090, 252252,
                630630, 1441440, 3063060, 210, 2310, 13860, 60060, 210210, 630630,
                1681680, 4084080, 9189180, 330, 3960, 25740, 120120, 450450, 1441440,
                4084080, 10501920, 24942060, 495, 6435, 45045, 225225, 900900,
                3063060, 9189180, 24942060, 62355150, 1, 6, 21, 56, 126, 252, 462,
                792, 1287, 6, 42, 168, 504, 1260, 2772, 5544, 10296, 18018, 21, 168,
                756, 2520, 6930, 16632, 36036, 72072, 135135, 56, 504, 2520, 9240,
                27720, 72072, 168168, 360360, 720720, 126, 1260, 6930, 27720, 90090,
                252252, 630630, 1441440, 3063060, 252, 2772, 16632, 72072, 252252,
                756756, 2018016, 4900896, 11027016, 462, 5544, 36036, 168168, 630630,
                2018016, 5717712, 14702688, 34918884, 792, 10296, 72072, 360360,
                1441440, 4900896, 14702688, 39907296, 99768240, 1287, 18018, 135135,
                720720, 3063060, 11027016, 34918884, 99768240, 261891630, 1, 7, 28,
                84, 210, 462, 924, 1716, 3003, 7, 56, 252, 840, 2310, 5544, 12012,
                24024, 45045, 28, 252, 1260, 4620, 13860, 36036, 84084, 180180,
                360360, 84, 840, 4620, 18480, 60060, 168168, 420420, 960960, 2042040,
                210, 2310, 13860, 60060, 210210, 630630, 1681680, 4084080, 9189180,
                462, 5544, 36036, 168168, 630630, 2018016, 5717712, 14702688,
                34918884, 924, 12012, 84084, 420420, 1681680, 5717712, 17153136,
                46558512, 116396280, 1716, 24024, 180180, 960960, 4084080, 14702688,
                46558512, 133024320, 349188840, 3003, 45045, 360360, 2042040,
                9189180, 34918884, 116396280, 349188840, 960269310, 1, 8, 36, 120,
                330, 792, 1716, 3432, 6435, 8, 72, 360, 1320, 3960, 10296, 24024,
                51480, 102960, 36, 360, 1980, 7920, 25740, 72072, 180180, 411840,
                875160, 120, 1320, 7920, 34320, 120120, 360360, 960960, 2333760,
                5250960, 330, 3960, 25740, 120120, 450450, 1441440, 4084080,
                10501920, 24942060, 792, 10296, 72072, 360360, 1441440, 4900896,
                14702688, 39907296, 99768240, 1716, 24024, 180180, 960960, 4084080,
                14702688, 46558512, 133024320, 349188840, 3432, 51480, 411840,
                2333760, 10501920, 39907296, 133024320, 399072960, 1097450640, 6435,
                102960, 875160, 5250960, 24942060, 99768240, 349188840, 1097450640,
                3155170590, 1, 9, 45, 165, 495, 1287, 3003, 6435, 12870, 9, 90, 495,
                1980, 6435, 18018, 45045, 102960, 218790, 45, 495, 2970, 12870,
                45045, 135135, 360360, 875160, 1969110, 165, 1980, 12870, 60060,
                225225, 720720, 2042040, 5250960, 12471030, 495, 6435, 45045, 225225,
                900900, 3063060, 9189180, 24942060, 62355150, 1287, 18018, 135135,
                720720, 3063060, 11027016, 34918884, 99768240, 261891630, 3003,
                45045, 360360, 2042040, 9189180, 34918884, 116396280, 349188840,
                960269310, 6435, 102960, 875160, 5250960, 24942060, 99768240,
                349188840, 1097450640, 3155170590, 12870, 218790, 1969110, 12471030,
                62355150, 261891630, 960269310, 3155170590, 9465511770
            };
            //Multinomial(0, 0, 3);
            Multinomial(0, 1, 1);
            var mx = 8;
            for (var n1 = 0; n1 <= mx; ++n1)
            for (var n2 = 0; n2 <= mx; ++n2)
            for (var n3 = 0; n3 <= mx; ++n3)
            {
                var mn = Multinomial(n1, n2, n3);
                var cn = ans[n1 * (mx+1) * (mx+1) + n2 * (mx+1) + n3];
                ClassicAssert.AreEqual(mn, cn);
            }
        }


        [Test]
        public void TestBinomial()
        {
            int [][] ans = new int[][]
                {
                new[]{1, 0, 1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11}, 
                new[]{-1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1}, 
                new[]{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
                new[]{0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
                new[]{0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0}, 
                new[]{0, 0, 1, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0}, 
                new[]{0, 0, 1, 4, 6, 4, 1, 0, 0, 0, 0, 0, 0}, 
                new[]{0, 0, 1, 5, 10, 10, 5, 1, 0, 0, 0, 0, 0}, 
                new[]{0, 0, 1, 6, 15, 20, 15, 6, 1, 0, 0, 0, 0},
                new[]{0, 0, 1, 7, 21, 35, 35, 21, 7, 1, 0, 0, 0}, 
                new[]{0, 0, 1, 8, 28, 56, 70, 56, 28, 8, 1, 0, 0}, 
                new[]{0, 0, 1, 9, 36, 84, 126, 126, 84, 36, 9, 1, 0}, 
                new[]{0, 0, 1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1}
                };

            // todo - extend to negative k
            for (var n = -2; n <= 10; ++n)
            for (var k = 0; k <= 10; ++k)
            {
                var nCk = Binomial(n,k);
                ClassicAssert.AreEqual(ans[n+2][k+2],nCk);
            }
        }

        [Test]
        public void TestBestFitPlane()
        {
            // pick points on plane
            // nx * x + ny * y + nz * z + d = 0

            var dir = new Vec3(1,2,3);
            var n1 = dir.Unit(); // normal
            var p1 = new Vec3(3, 5, 7); // point on plane

            // point q on plane iff
            // n.(p-q) = 0
            // n.p == n.q
            // qz = (n.p-nx*qx-ny*qy)/nz

            var r = new Random(1234);
            var pts = new List<Vec3>();
            for (var i =0; i < 100; ++i)
            {
                var x = (double)r.Next(-100, 100);
                var y = (double)r.Next(-100, 100);
                var z = (Vec3.Dot(n1,p1)-n1.X*x - n1.Y*y)/n1.Z;

                pts.Add(new Vec3(x,y,z));
            }

            var (n2,p2) = Lomont.Geometry.Utility.BestFitPlane(pts);

            Console.WriteLine($"{n1}  {n2}");

            if ((n2 - n1).Length > 0.1)
                n2 = -n2; // recerse normal
            ClassicAssert.True((n1 - n2).Length < 0.000001);
            ClassicAssert.True(Vec3.Dot(n1, p1 - p2) < 0.0001); // point on plane
            ClassicAssert.True(Vec3.Dot(n2, p1 - p2) < 0.0001); // point on plane
        }
    }
}
